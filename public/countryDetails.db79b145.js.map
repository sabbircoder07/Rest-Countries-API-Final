{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,Q,I,G,E,E,O,C,iB,I,G,E,E,O,C,kB,I,G,E,E,O,C,kB,I,G,E,E,O,C,oB,I,G,E,E,O,C,gB,I,G,E,E,O,C,4B,I,G,E,E,O,C,sB,I,G,E,E,O,C,qB,I,G,E,E,O,C,qB,I,G,I,E,E,S,E,E,SCGO,IAAM,EAAQ,CACnB,YAAa,GACb,QAAS,EAAE,CACX,cAAe,EAAE,CACjB,WAAY,CACV,MAAO,GACP,QAAS,EAAE,CACX,eAAgB,EAAA,gBAAe,CAC/B,KAAM,CACR,EACA,eAAgB,CACd,MAAO,GACP,KAAM,GACN,WAAY,GACZ,WAAY,GACZ,iBAAkB,GAClB,OAAQ,GACR,UAAW,GACX,QAAS,GACT,eAAgB,GAChB,WAAY,EAAE,CACd,UAAW,EAAE,CACb,QAAS,EAAE,CACX,KAAM,EACR,CACF,EAEa,EAAiB,SAAU,CAAW,EACjD,GAAI,CACF,aAAa,OAAO,CAAC,cAAe,GACpC,IAAM,EAAgB,aAAa,OAAO,CAAC,eACvC,GAAe,CAAA,EAAM,WAAW,CAAG,CAAvC,CACF,CAAE,MAAO,EAAK,CACZ,MAAM,CACR,QAAU,CACV,CACF,EAEa,EAAkB,SAAU,CAAW,EAClD,GAAI,CACF,IAAM,EAAuB,aAAa,OAAO,CAAC,eAC9C,EACF,EAAM,WAAW,CAAG,EAEpB,EAAM,WAAW,CAAG,CAExB,CAAE,MAAO,EAAK,CACZ,MAAM,CACR,QAAU,CACV,CACF,EAWa,EAAkB,iBAC7B,GAAI,CACF,IAAM,EAAgB,MAAM,AAAA,CAAA,EAAA,EAAA,OAAM,AAAN,EAAQ,CAAA,EAAG,EAAA,OAAM,CA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","sources":["<anon>","src/js/model.js","src/js/config.js","src/js/helper.js","src/js/views/modeSwitcherView.js","src/js/controllerDetails.js","src/js/views/countryDetailsView.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1is5Y\", function(module, exports) {\n\n$parcel$export(module.exports, \"state\", () => $0f1d4402dffacf5b$export$ca000e230c0caa3e);\n$parcel$export(module.exports, \"getCurrentMode\", () => $0f1d4402dffacf5b$export$b159f842577c039);\n$parcel$export(module.exports, \"loadCurrentMode\", () => $0f1d4402dffacf5b$export$c8dee6738b0bfb71);\n$parcel$export(module.exports, \"getAllCountries\", () => $0f1d4402dffacf5b$export$295b74b5bfa1a9f4);\n$parcel$export(module.exports, \"fetchCountryNames\", () => $0f1d4402dffacf5b$export$475113bd78e16fc0);\n$parcel$export(module.exports, \"getAllRegions\", () => $0f1d4402dffacf5b$export$fb3f159b0e9d62f9);\n$parcel$export(module.exports, \"loadSearchResultByCountry\", () => $0f1d4402dffacf5b$export$10961764e27601cc);\n$parcel$export(module.exports, \"loadCountryByRegion\", () => $0f1d4402dffacf5b$export$2323b995609520dd);\n$parcel$export(module.exports, \"loadCountryDetails\", () => $0f1d4402dffacf5b$export$3e5c7dc73e3fd9a);\n$parcel$export(module.exports, \"getCountriesByPage\", () => $0f1d4402dffacf5b$export$b15082540cc0fc25);\n\nvar $fZ5A9 = parcelRequire(\"fZ5A9\");\n\nvar $i9R9q = parcelRequire(\"i9R9q\");\nconst $0f1d4402dffacf5b$export$ca000e230c0caa3e = {\n    currentMode: \"\",\n    regions: [],\n    countriesName: [],\n    countyList: {\n        query: \"\",\n        results: [],\n        resultsPerPage: (0, $fZ5A9.COUNTRY_PER_PAGE),\n        page: 1\n    },\n    countryDetails: {\n        query: \"\",\n        name: \"\",\n        nativeName: \"\",\n        population: \"\",\n        populationOnWord: \"\",\n        region: \"\",\n        subregion: \"\",\n        capital: \"\",\n        topLevelDomain: \"\",\n        currencies: [],\n        languages: [],\n        borders: [],\n        flag: \"\"\n    }\n};\nconst $0f1d4402dffacf5b$export$b159f842577c039 = function(currentMode) {\n    try {\n        localStorage.setItem(\"currentMode\", currentMode);\n        const currentStMode = localStorage.getItem(\"currentMode\");\n        if (currentStMode) $0f1d4402dffacf5b$export$ca000e230c0caa3e.currentMode = currentStMode;\n    } catch (err) {\n        throw err;\n    } finally{}\n};\nconst $0f1d4402dffacf5b$export$c8dee6738b0bfb71 = function(currentMode) {\n    try {\n        const currentModeByStorage = localStorage.getItem(\"currentMode\");\n        if (currentModeByStorage) $0f1d4402dffacf5b$export$ca000e230c0caa3e.currentMode = currentModeByStorage;\n        else $0f1d4402dffacf5b$export$ca000e230c0caa3e.currentMode = currentMode;\n    } catch (err) {\n        throw err;\n    } finally{}\n};\nconst $0f1d4402dffacf5b$export$295b74b5bfa1a9f4 = async function() {\n    try {\n        const countriesData = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}all`);\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results = countriesData.sort((countryA, countryB)=>countryA.name.common.localeCompare(countryB.name.common));\n    } catch (error) {\n        throw error;\n    }\n};\nconst $0f1d4402dffacf5b$export$475113bd78e16fc0 = async function() {\n    try {\n        // Make a GET request to the Rest Countries API to retrieve a list of all countries\n        const allCountries = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}all`);\n        // Extract the common name of each country from the list of countries\n        const countryNames = allCountries.map((country)=>country.name.common);\n        // Remove duplicates from the list of country names\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countriesName = [\n            ...new Set(countryNames)\n        ];\n    } catch (error) {\n        // Handle any errors that occur during the execution of the function\n        throw error;\n    }\n};\nconst $0f1d4402dffacf5b$export$fb3f159b0e9d62f9 = async function() {\n    try {\n        // Make a GET request to the Rest Countries API to retrieve a list of all countries\n        const countries = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}all`);\n        // Extract the region from each country in the list of countries\n        const regions = countries.map((country)=>country.region);\n        // Remove duplicates from the list of regions and store the result in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.regions = [\n            ...new Set(regions)\n        ];\n    } catch (err) {\n        // Handle any errors that occur during the execution of the function\n        throw err;\n    }\n};\nconst $0f1d4402dffacf5b$export$10961764e27601cc = async function(countryName) {\n    try {\n        // Trim the country name to remove any leading or trailing whitespace\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.query = countryName.trim();\n        // Make a GET request to the Rest Countries API to retrieve a list of countries that match the given country name\n        const data = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}name/${countryName.trim()}?fullText=true`);\n        // Store the list of countries in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results = data;\n    } catch (error) {\n        // Handle any errors that occur during the execution of the function\n        throw error;\n    } finally{\n    // Clean up any resources used by the function\n    }\n};\nconst $0f1d4402dffacf5b$export$2323b995609520dd = async function(regionName) {\n    try {\n        // Trim the region name to remove any leading or trailing whitespace\n        const trimmedRegionName = regionName.trim();\n        // Update the query in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.query = trimmedRegionName;\n        // Make a GET request to the Rest Countries API to retrieve countries in the specified region\n        const data = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}region/${trimmedRegionName}`);\n        // Store the retrieved list of countries in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results = data;\n    } catch (error) {\n        // Handle any errors that occur during the execution of the function\n        throw error;\n    } finally{\n    // Optionally, you can include any cleanup code here\n    }\n};\nconst $0f1d4402dffacf5b$export$3e5c7dc73e3fd9a = async function(countryName) {\n    try {\n        // Fetch country details from the API using the full-text search\n        const countryData = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}name/${countryName.trim()}?fullText=true`);\n        // Update the application state with the retrieved country details\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.name = countryData[0].name.common;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.nativeName = countryData[0].nativeName;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.population = countryData[0].population;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.region = countryData[0].region;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.subregion = countryData[0].subregion;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.capital = countryData[0].capital;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.topLevelDomain = countryData[0].topLevelDomain;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.currencies = countryData[0].currencies;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.languages = countryData[0].languages;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.flag = countryData[0].flags.png;\n        // If the country has borders, fetch all countries and filter by borders\n        if (countryData[0].borders) {\n            const allCountriesData = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}all`);\n            $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.borders = allCountriesData.filter((country)=>countryData[0].borders.includes(country.cca3)).map((country)=>country.name.common);\n        }\n    } catch (err) {\n        // Handle any errors that occur during the execution of the function\n        throw err;\n    }\n};\nconst $0f1d4402dffacf5b$export$b15082540cc0fc25 = function(page = $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.page) {\n    try {\n        // Set the current page number in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.page = page;\n        // Calculate the start and end indices of the slice of countries to retrieve\n        const start = 0;\n        const end = page * $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.resultsPerPage;\n        // Retrieve the slice of countries from the application state\n        return $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results.slice(start, end);\n    } catch (err) {\n        // Handle any errors that occur during the execution of the function\n        throw err;\n    }\n};\n\n});\nparcelRegister(\"fZ5A9\", function(module, exports) {\n\n$parcel$export(module.exports, \"API_URL\", () => $ba30e20475feac5a$export$923ea8233b386e99);\n$parcel$export(module.exports, \"TIMEOUT_SEC\", () => $ba30e20475feac5a$export$196440f71ed9f601);\n$parcel$export(module.exports, \"COUNTRY_PER_PAGE\", () => $ba30e20475feac5a$export$68641eeff6858e0f);\n$parcel$export(module.exports, \"SHOW_COUNTRIES_SEC\", () => $ba30e20475feac5a$export$470c370c53745de3);\nconst $ba30e20475feac5a$export$923ea8233b386e99 = \"https://restcountries.com/v3.1/\";\nconst $ba30e20475feac5a$export$196440f71ed9f601 = 20;\nconst $ba30e20475feac5a$export$68641eeff6858e0f = 20;\nconst $ba30e20475feac5a$export$470c370c53745de3 = 1;\n\n});\n\nparcelRegister(\"i9R9q\", function(module, exports) {\n\n$parcel$export(module.exports, \"getJSON\", () => $d3824bf2ef2465db$export$d047a7c56db64af4);\n\nvar $fZ5A9 = parcelRequire(\"fZ5A9\");\n/**\r\n * Returns a Promise that rejects with an error after a specified number of seconds.\r\n *\r\n * @param {number} seconds - The number of seconds to wait before rejecting the promise.\r\n * @returns {Promise<never>} A Promise that rejects with an error indicating the request took too long.\r\n *\r\n * @description\r\n * This function takes a number of seconds as an argument and returns a Promise that\r\n * automatically rejects after the specified number of seconds. The Promise is\r\n * rejected with an Error object that contains a message that describes the timeout.\r\n */ const $d3824bf2ef2465db$var$timeout = function(seconds) {\n    return new Promise(function(_, reject) {\n        setTimeout(()=>{\n            reject(new Error(`Request took too long! Timeout after ${seconds} second`));\n        }, seconds * 1000);\n    });\n};\nconst $d3824bf2ef2465db$export$d047a7c56db64af4 = async function(url) {\n    try {\n        console.log(url);\n        // Fetch the data from the given URL, and set a timeout of 5 seconds\n        const response = await Promise.race([\n            fetch(url),\n            $d3824bf2ef2465db$var$timeout((0, $fZ5A9.TIMEOUT_SEC))\n        ]);\n        // If the request was not successful, reject the Promise with an error\n        if (!response.ok) {\n            const error = new Error(`${response.statusText} ${response.status}`);\n            throw error;\n        }\n        // If the request was successful, parse the response data as JSON\n        const jsonData = await response.json();\n        // Return the parsed JSON data\n        return jsonData;\n    } catch (error) {\n        // If there was an error, rethrow it to the caller\n        console.log(error);\n        throw error;\n    }\n};\n\n});\n\n\nparcelRegister(\"2hk5J\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $1a8cc1083fd329eb$export$2e2bcd8739ae039);\nclass $1a8cc1083fd329eb$export$f5b15f0672111987 {\n    _modeSwitcher = document.querySelector(\".header__mode-switcher\");\n    _switcherText = document.querySelector(\".header__mode-switcher__text-box\");\n    _modeSwitcherIcon = document.querySelector(\".header__mode-switcher__icon\");\n    _data;\n    render(data) {\n        this._data = data;\n        this._renderModeSwitcher();\n    }\n    getCountyQuery(currentMode) {\n        if (!currentMode) return this._switcherText.textContent;\n        else {\n            if (currentMode == \"Dark Mode\") this._data = \"Light Mode\";\n            else if (currentMode == \"Light Mode\") this._data = \"Dark Mode\";\n            return this._data;\n        }\n    }\n    addHandlerLoad(render) {\n        window.addEventListener(\"load\", render);\n    }\n    addHandlerClick(render) {\n        this._modeSwitcher.addEventListener(\"click\", render);\n    }\n    _renderModeSwitcher() {\n        let root = document.querySelector(\":root\");\n        if (this._data == \"Dark Mode\") {\n            root.style.setProperty(\"--color-Very-Light-Gray-Light-Mode-Background\", \"hsl(207, 26%, 17%)\");\n            root.style.setProperty(\"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\", \"hsl(209, 23%, 22%)\");\n            root.style.setProperty(\"--color-Very-Dark-Blue-Light-Mode-Text\", \"hsl(0, 0%, 100%)\");\n            root.style.setProperty(\"--color-Dark-Gray-Light-Mode-Input\", \"hsl(0, 0%, 100%)\");\n            this._modeSwitcherIcon.src = \"https://shivanarrthine.com/public/images/icons/sun.svg\";\n        } else {\n            root.style.setProperty(\"--color-Very-Light-Gray-Light-Mode-Background\", \"hsl(0, 0%, 98%)\");\n            root.style.setProperty(\"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\", \"hsl(0, 0%, 100%)\");\n            root.style.setProperty(\"--color-Very-Dark-Blue-Light-Mode-Text\", \"hsl(200, 15%, 8%)\");\n            root.style.setProperty(\"--color-Dark-Gray-Light-Mode-Input\", \"hsl(0, 0%, 52%)\");\n            this._modeSwitcherIcon.src = \"https://shivanarrthine.com/public/images/icons/moon.svg\";\n        }\n        this._switcherText.textContent = this._data === \"Light Mode\" ? \"Dark Mode\" : \"Light Mode\";\n    }\n}\nvar $1a8cc1083fd329eb$export$2e2bcd8739ae039 = new $1a8cc1083fd329eb$export$f5b15f0672111987();\n\n});\n\n\nvar $1is5Y = parcelRequire(\"1is5Y\");\nclass $40e644d66125b8d9$export$79f519a718253de6 {\n    _parentElement = document.querySelector(\".country-details\");\n    _data;\n    _errorMessage = \"We could not find a country with that name.\";\n    render(data) {\n        this._data = data;\n        let markup = \"\";\n        markup = this._generateMarkup();\n        this._clearMarkup();\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    }\n    getCountyName() {\n        const queryString = decodeURIComponent(window.location.search.split(\"=\")[1]);\n        return queryString;\n    }\n    addHandlerLoadCountry(render) {\n        [\n            \"load\"\n        ].forEach((ev)=>window.addEventListener(ev, render));\n    }\n    addHandlerRender(render) {\n        [\n            \"load\"\n        ].forEach((ev)=>window.addEventListener(ev, render));\n    }\n    renderSpinner = function() {\n        let markup = `<div class=\"loader-container\">\n    <div class=\"loader\"></div>\n    <div class=\"loader-text\">Loading...</div>\n    </div>`;\n        this._parentElement.innerHTML = \"\";\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    };\n    renderError(message = this._errorMessage) {\n        const markup = `<div class=\"message msg-danger\">\n    <div class=\"message-icon\">\n      <i class=\"ion-close-round\">\n      <img src=\"images/error_icon.svg\" alt=\"error\" />\n      </i>\n    </div>\n    <div class=\"message-content\">\n      <p>${message}</p>\n    </div>\n    <a href=\"_\" class=\"message-close\">\n      <img class=\"close-icon\" src=\"images/cross-icon.svg\" alt=\"close\" />\n    </a>  \n  </div>`;\n        this._parentElement.innerHTML = \"\";\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    }\n    _clearMarkup() {\n        this._parentElement.innerHTML = \"\";\n    }\n    _generateMarkup() {\n        let html = \"\";\n        if (this._data.length === 0) return;\n        html += `<article class=\"country-details__info\">\n    <img class=\"country-details__img\" alt=\"${this._data.name}\" src=\"${this._data.flag}\" />\n    <div class=\"country-details__data\">\n      <h1 class=\"heading-primary-large country-details__name\">${this._data.name}</h1>\n      <div class=\"country-details__basic-details-info\">\n      <p class=\"country-details__row\"><span>Native Name: </span>\n      ${!this._data.nativeName ? \"Not Found\" : this._data.nativeName}\n      </p>\n      <p class=\"country-details__row\"><span>Top Level Domain:</span>${!this._data.topLevelDomain ? \"Not Found\" : this._data.topLevelDomain} </p>\n      <p class=\"country-details__row\"><span>Population: </span>${this._data.population.toLocaleString()}</p>\n       <p class=\"country-details__row\"><span>Currencies: </span>\n      ${typeof this._data.currencies === \"object\" ? this._data.currencies[Object.keys(this._data.currencies)[0]].name : \"\"}\n      </p>\n\n      <p class=\"country-details__row\">\n      <span>Region:</span>${this._data.region}\n      </p>\n    \n      <p class=\"country-details__row\"><span>Languages: </span>\n      ${Object.entries(this._data.languages).map(([key, value])=>value)}\n      </p>\n      <p class=\"country-details__row\"><span>Sub Region: </span>${this._data.subregion}\n        </p>\n      <p class=\"country-details__row\"><span>Capital: </span>${this._data.capital}</p>\n      </div>\n      <div class=\"country-details__border-info\">\n        <p class=\"country-details__row\"><span>Border Countries: </span></p>\n        <div class=\"country-details__border-container\">\n        ${this._data.borders ? this._data.borders.map((border)=>`<a href=\"countryDetails.html?name=${border}\" class=\"country-details__border\" >${border}</a>`).join(\"\") : \"Not Found\"}\n        </div>\n      </div>\n    </div>  \n  </article>`;\n        return html;\n    }\n}\nvar $40e644d66125b8d9$export$2e2bcd8739ae039 = new $40e644d66125b8d9$export$79f519a718253de6();\n\n\n\nvar $2hk5J = parcelRequire(\"2hk5J\");\n\nvar $fZ5A9 = parcelRequire(\"fZ5A9\");\nconst $3d39cf23b19d94b7$var$controlCountryDetails = async function() {\n    try {\n        const CountryName = (0, $40e644d66125b8d9$export$2e2bcd8739ae039).getCountyName();\n        if (!CountryName) return;\n        (0, $40e644d66125b8d9$export$2e2bcd8739ae039).renderSpinner();\n        await $1is5Y.loadCountryDetails(CountryName);\n        setTimeout(function() {\n            const data = $1is5Y.state.countryDetails;\n            (0, $40e644d66125b8d9$export$2e2bcd8739ae039).render(data);\n        }, $fZ5A9.SHOW_COUNTRIES_SEC * 1000);\n    //renders countries\n    } catch (err) {\n        // Alert the user of any errors\n        (0, $40e644d66125b8d9$export$2e2bcd8739ae039).renderError(err);\n    }\n};\nconst $3d39cf23b19d94b7$var$controlModeSwitcher = function() {\n    try {\n        const currentMode = (0, $2hk5J.default).getCountyQuery($1is5Y.state.currentMode);\n        if (!currentMode) return;\n        $1is5Y.getCurrentMode(currentMode);\n        const data = $1is5Y.state.currentMode;\n        (0, $2hk5J.default).render(data);\n    } catch (err) {\n        // Alert the user of any errors\n        (0, $40e644d66125b8d9$export$2e2bcd8739ae039).renderError(err);\n    }\n};\nconst $3d39cf23b19d94b7$var$controlModeSwitcherPageLoad = function() {\n    try {\n        $1is5Y.loadCurrentMode(\"Light Mode\");\n        const data = $1is5Y.state.currentMode;\n        (0, $2hk5J.default).render(data);\n    } catch (err) {\n        // Alert the user of any errors\n        (0, $40e644d66125b8d9$export$2e2bcd8739ae039).renderError(err);\n    }\n};\nconst $3d39cf23b19d94b7$var$init = function() {\n    (0, $2hk5J.default).addHandlerLoad($3d39cf23b19d94b7$var$controlModeSwitcherPageLoad);\n    (0, $2hk5J.default).addHandlerClick($3d39cf23b19d94b7$var$controlModeSwitcher);\n    (0, $40e644d66125b8d9$export$2e2bcd8739ae039).addHandlerRender($3d39cf23b19d94b7$var$controlCountryDetails);\n};\n$3d39cf23b19d94b7$var$init();\n\n\n//# sourceMappingURL=countryDetails.db79b145.js.map\n","import { API_URL, COUNTRY_PER_PAGE } from \"./config.js\";\r\nimport { getJSON } from \"./helper.js\";\r\n\r\nexport const state = {\r\n  currentMode: \"\",\r\n  regions: [],\r\n  countriesName: [],\r\n  countyList: {\r\n    query: \"\",\r\n    results: [],\r\n    resultsPerPage: COUNTRY_PER_PAGE,\r\n    page: 1,\r\n  },\r\n  countryDetails: {\r\n    query: \"\",\r\n    name: \"\",\r\n    nativeName: \"\",\r\n    population: \"\",\r\n    populationOnWord: \"\",\r\n    region: \"\",\r\n    subregion: \"\",\r\n    capital: \"\",\r\n    topLevelDomain: \"\",\r\n    currencies: [],\r\n    languages: [],\r\n    borders: [],\r\n    flag: \"\",\r\n  },\r\n};\r\n\r\nexport const getCurrentMode = function (currentMode) {\r\n  try {\r\n    localStorage.setItem(\"currentMode\", currentMode);\r\n    const currentStMode = localStorage.getItem(\"currentMode\");\r\n    if (currentStMode) state.currentMode = currentStMode;\r\n  } catch (err) {\r\n    throw err;\r\n  } finally {\r\n  }\r\n};\r\n\r\nexport const loadCurrentMode = function (currentMode) {\r\n  try {\r\n    const currentModeByStorage = localStorage.getItem(\"currentMode\");\r\n    if (currentModeByStorage) {\r\n      state.currentMode = currentModeByStorage;\r\n    } else {\r\n      state.currentMode = currentMode;\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  } finally {\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches and stores a sorted list of all countries from the Rest Countries API.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * Retrieves all countries from the Rest Countries API, sorts them by name,\r\n * and updates the application state.\r\n */\r\nexport const getAllCountries = async function () {\r\n  try {\r\n    const countriesData = await getJSON(`${API_URL}all`);\r\n    state.countyList.results = countriesData.sort((countryA, countryB) =>\r\n      countryA.name.common.localeCompare(countryB.name.common)\r\n    );\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves all countries from the Rest Countries API, extracts their common names,\r\n * removes duplicates, and updates the application state with the list of unique country names.\r\n * The list of country names is used to populate the autocomplete input field.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves a list of\r\n * all countries. The list is then processed to extract the common name of\r\n * each country, and the results are stored in the application state. The\r\n * list of country names is used to populate the autocomplete input field.\r\n */\r\nexport const fetchCountryNames = async function () {\r\n  try {\r\n    // Make a GET request to the Rest Countries API to retrieve a list of all countries\r\n    const allCountries = await getJSON(`${API_URL}all`);\r\n\r\n    // Extract the common name of each country from the list of countries\r\n    const countryNames = allCountries.map((country) => country.name.common);\r\n\r\n    // Remove duplicates from the list of country names\r\n    state.countriesName = [...new Set(countryNames)];\r\n  } catch (error) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw error;\r\n  }\r\n};\r\n/******  93714125-661a-43ef-908d-0bf8d66b61e7  *******/\r\n\r\n/**\r\n * Retrieves a list of all regions from the Rest Countries API and updates the application state with it.\r\n * The list of regions is used to populate the select input field.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves a list of all countries.\r\n * The list of countries is processed to extract the regions from each country, and the results are stored\r\n * in the application state. The list of regions is used to populate the select input field.\r\n *\r\n * @example\r\n * import { getAllRegions } from \"./model.js\";\r\n * getAllRegions();\r\n */\r\nexport const getAllRegions = async function () {\r\n  try {\r\n    // Make a GET request to the Rest Countries API to retrieve a list of all countries\r\n    const countries = await getJSON(`${API_URL}all`);\r\n\r\n    // Extract the region from each country in the list of countries\r\n    const regions = countries.map((country) => country.region);\r\n\r\n    // Remove duplicates from the list of regions and store the result in the application state\r\n    state.regions = [...new Set(regions)];\r\n  } catch (err) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a list of countries from the Rest Countries API that match the given country name, and updates the application state with the result.\r\n * @async\r\n * @function\r\n * @param {string} countryName - The country name to search for. The country name is trimmed to remove any leading or trailing whitespace.\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves a list of countries that match the given country name.\r\n * The list of countries is stored in the application state. The `fullText=true` parameter is used to search for countries using the full-text search.\r\n * The list of countries is stored in the application state.\r\n *\r\n * @example\r\n * import { loadSearchResultByCountry } from \"./model.js\";\r\n * loadSearchResultByCountry(\"Nigeria\");\r\n */\r\nexport const loadSearchResultByCountry = async function (countryName) {\r\n  try {\r\n    // Trim the country name to remove any leading or trailing whitespace\r\n    state.countyList.query = countryName.trim();\r\n\r\n    // Make a GET request to the Rest Countries API to retrieve a list of countries that match the given country name\r\n    const data = await getJSON(\r\n      `${API_URL}name/${countryName.trim()}?fullText=true`\r\n    );\r\n\r\n    // Store the list of countries in the application state\r\n    state.countyList.results = data;\r\n  } catch (error) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw error;\r\n  } finally {\r\n    // Clean up any resources used by the function\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a list of countries from the Rest Countries API that are located in the given region,\r\n * and updates the application state with the result.\r\n * @async\r\n * @function\r\n * @param {string} regionName - The region to search for. The region name is trimmed to remove any leading or trailing whitespace.\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves a list of countries that are located in the given region.\r\n * The list of countries is stored in the application state.\r\n *\r\n * @example\r\n * import { loadCountryByRegion } from \"./model.js\";\r\n * loadCountryByRegion(\"Africa\");\r\n */\r\nexport const loadCountryByRegion = async function (regionName) {\r\n  try {\r\n    // Trim the region name to remove any leading or trailing whitespace\r\n    const trimmedRegionName = regionName.trim();\r\n\r\n    // Update the query in the application state\r\n    state.countyList.query = trimmedRegionName;\r\n\r\n    // Make a GET request to the Rest Countries API to retrieve countries in the specified region\r\n    const data = await getJSON(`${API_URL}region/${trimmedRegionName}`);\r\n\r\n    // Store the retrieved list of countries in the application state\r\n    state.countyList.results = data;\r\n  } catch (error) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw error;\r\n  } finally {\r\n    // Optionally, you can include any cleanup code here\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the details of a given country from the Rest Countries API and updates the application state with the result.\r\n * @async\r\n * @function\r\n * @param {string} countryName - The name of the country to retrieve details about.\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves the details of the given country.\r\n * The retrieved data is then stored in the application state.\r\n * The `fullText=true` parameter is used to search for countries using the full-text search.\r\n *\r\n * @example\r\n * import { loadCountryDetails } from \"./model.js\";\r\n * loadCountryDetails(\"Nigeria\");\r\n */\r\nexport const loadCountryDetails = async function (countryName) {\r\n  try {\r\n    // Fetch country details from the API using the full-text search\r\n    const countryData = await getJSON(\r\n      `${API_URL}name/${countryName.trim()}?fullText=true`\r\n    );\r\n\r\n    // Update the application state with the retrieved country details\r\n    state.countryDetails.name = countryData[0].name.common;\r\n    state.countryDetails.nativeName = countryData[0].nativeName;\r\n    state.countryDetails.population = countryData[0].population;\r\n    state.countryDetails.region = countryData[0].region;\r\n    state.countryDetails.subregion = countryData[0].subregion;\r\n    state.countryDetails.capital = countryData[0].capital;\r\n    state.countryDetails.topLevelDomain = countryData[0].topLevelDomain;\r\n    state.countryDetails.currencies = countryData[0].currencies;\r\n    state.countryDetails.languages = countryData[0].languages;\r\n    state.countryDetails.flag = countryData[0].flags.png;\r\n\r\n    // If the country has borders, fetch all countries and filter by borders\r\n    if (countryData[0].borders) {\r\n      const allCountriesData = await getJSON(`${API_URL}all`);\r\n      state.countryDetails.borders = allCountriesData\r\n        .filter((country) => countryData[0].borders.includes(country.cca3))\r\n        .map((country) => country.name.common);\r\n    }\r\n  } catch (err) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a slice of the list of countries in the application state, where the\r\n * slice is determined by the given page number.\r\n *\r\n * @param {number} [page=state.countyList.page] - The page number to retrieve.\r\n * @returns {Country[]} - A slice of the list of countries.\r\n * @description\r\n * This function retrieves a subset of the list of countries in the application\r\n * state, where the subset is determined by the given page number. The subset is\r\n * retrieved by slicing the list of countries starting from the first element\r\n * up to the element at the given page number multiplied by the number of\r\n * countries to display per page.\r\n *\r\n * @example\r\n * import { getCountriesByPage } from \"./model.js\";\r\n * const countries = getCountriesByPage(1);\r\n * console.log(countries);\r\n */\r\nexport const getCountriesByPage = function (page = state.countyList.page) {\r\n  try {\r\n    // Set the current page number in the application state\r\n    state.countyList.page = page;\r\n\r\n    // Calculate the start and end indices of the slice of countries to retrieve\r\n    const start = 0;\r\n    const end = page * state.countyList.resultsPerPage;\r\n\r\n    // Retrieve the slice of countries from the application state\r\n    return state.countyList.results.slice(start, end);\r\n  } catch (err) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw err;\r\n  }\r\n};\r\n","export const API_URL = \"https://restcountries.com/v3.1/\";\r\nexport const TIMEOUT_SEC = 20;\r\nexport const COUNTRY_PER_PAGE = 20;\r\nexport const SHOW_COUNTRIES_SEC = 1;\r\n","import { TIMEOUT_SEC } from \"./config.js\";\r\n\r\n/**\r\n * Returns a Promise that rejects with an error after a specified number of seconds.\r\n *\r\n * @param {number} seconds - The number of seconds to wait before rejecting the promise.\r\n * @returns {Promise<never>} A Promise that rejects with an error indicating the request took too long.\r\n *\r\n * @description\r\n * This function takes a number of seconds as an argument and returns a Promise that\r\n * automatically rejects after the specified number of seconds. The Promise is\r\n * rejected with an Error object that contains a message that describes the timeout.\r\n */\r\nconst timeout = function (seconds) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(() => {\r\n      reject(\r\n        new Error(`Request took too long! Timeout after ${seconds} second`)\r\n      );\r\n    }, seconds * 1000);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetches data from the specified URL and returns it in JSON format.\r\n *\r\n * @async\r\n * @function\r\n * @param {string} url - The URL to fetch data from.\r\n * @returns {Promise<Object>} A Promise that resolves with the JSON data from the given URL.\r\n * @throws {Error} If the request was unsuccessful or timed out.\r\n *\r\n * @description\r\n * This function takes a URL as an argument, fetches the data from that URL, and\r\n * returns it in JSON format. It will wait for a maximum of 5 seconds for the\r\n * request to complete before rejecting the Promise with a timeout error.\r\n * If the request is successful, but the response status is not 200, the Promise\r\n * will also be rejected with an error containing the message from the response\r\n * and the status code.\r\n */\r\nexport const getJSON = async function (url) {\r\n  try {\r\n    console.log(url);\r\n    // Fetch the data from the given URL, and set a timeout of 5 seconds\r\n    const response = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]);\r\n\r\n    // If the request was not successful, reject the Promise with an error\r\n    if (!response.ok) {\r\n      const error = new Error(`${response.statusText} ${response.status}`);\r\n      throw error;\r\n    }\r\n\r\n    // If the request was successful, parse the response data as JSON\r\n    const jsonData = await response.json();\r\n\r\n    // Return the parsed JSON data\r\n    return jsonData;\r\n  } catch (error) {\r\n    // If there was an error, rethrow it to the caller\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n","export class ModeSwitcherView {\r\n  _modeSwitcher = document.querySelector(\".header__mode-switcher\");\r\n  _switcherText = document.querySelector(\".header__mode-switcher__text-box\");\r\n  _modeSwitcherIcon = document.querySelector(\".header__mode-switcher__icon\");\r\n  _data;\r\n\r\n  render(data) {\r\n    this._data = data;\r\n    this._renderModeSwitcher();\r\n  }\r\n\r\n  getCountyQuery(currentMode) {\r\n    if (!currentMode) {\r\n      return this._switcherText.textContent;\r\n    } else {\r\n      if (currentMode == \"Dark Mode\") {\r\n        this._data = \"Light Mode\";\r\n      } else if (currentMode == \"Light Mode\") {\r\n        this._data = \"Dark Mode\";\r\n      }\r\n      return this._data;\r\n    }\r\n  }\r\n\r\n  addHandlerLoad(render) {\r\n    window.addEventListener(\"load\", render);\r\n  }\r\n\r\n  addHandlerClick(render) {\r\n    this._modeSwitcher.addEventListener(\"click\", render);\r\n  }\r\n\r\n  _renderModeSwitcher() {\r\n    let root = document.querySelector(\":root\");\r\n    if (this._data == \"Dark Mode\") {\r\n      root.style.setProperty(\r\n        \"--color-Very-Light-Gray-Light-Mode-Background\",\r\n        \"hsl(207, 26%, 17%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\",\r\n        \"hsl(209, 23%, 22%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Very-Dark-Blue-Light-Mode-Text\",\r\n        \"hsl(0, 0%, 100%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Dark-Gray-Light-Mode-Input\",\r\n        \"hsl(0, 0%, 100%)\"\r\n      );\r\n      this._modeSwitcherIcon.src =\r\n        \"https://shivanarrthine.com/public/images/icons/sun.svg\";\r\n    } else {\r\n      root.style.setProperty(\r\n        \"--color-Very-Light-Gray-Light-Mode-Background\",\r\n        \"hsl(0, 0%, 98%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\",\r\n        \"hsl(0, 0%, 100%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Very-Dark-Blue-Light-Mode-Text\",\r\n        \"hsl(200, 15%, 8%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Dark-Gray-Light-Mode-Input\",\r\n        \"hsl(0, 0%, 52%)\"\r\n      );\r\n      this._modeSwitcherIcon.src =\r\n        \"https://shivanarrthine.com/public/images/icons/moon.svg\";\r\n    }\r\n    this._switcherText.textContent =\r\n      this._data === \"Light Mode\" ? \"Dark Mode\" : \"Light Mode\";\r\n  }\r\n}\r\n\r\nexport default new ModeSwitcherView();\r\n","import * as model from \"./model.js\";\r\nimport countryDetailsView from \"./views/countryDetailsView.js\";\r\nimport modeSwitcherView from \"./views/modeSwitcherView.js\";\r\nimport * as config from \"./config.js\";\r\n\r\nconst controlCountryDetails = async function () {\r\n  try {\r\n    const CountryName = countryDetailsView.getCountyName();\r\n    if (!CountryName) return;\r\n    countryDetailsView.renderSpinner();\r\n    await model.loadCountryDetails(CountryName);\r\n    setTimeout(function () {\r\n      const data = model.state.countryDetails;\r\n      countryDetailsView.render(data);\r\n    }, config.SHOW_COUNTRIES_SEC * 1000);\r\n    //renders countries\r\n  } catch (err) {\r\n    // Alert the user of any errors\r\n    countryDetailsView.renderError(err);\r\n  }\r\n};\r\n\r\nconst controlModeSwitcher = function () {\r\n  try {\r\n    const currentMode = modeSwitcherView.getCountyQuery(\r\n      model.state.currentMode\r\n    );\r\n    if (!currentMode) return;\r\n    model.getCurrentMode(currentMode);\r\n    const data = model.state.currentMode;\r\n    modeSwitcherView.render(data);\r\n  } catch (err) {\r\n    // Alert the user of any errors\r\n    countryDetailsView.renderError(err);\r\n  }\r\n};\r\n\r\nconst controlModeSwitcherPageLoad = function () {\r\n  try {\r\n    model.loadCurrentMode(\"Light Mode\");\r\n    const data = model.state.currentMode;\r\n    modeSwitcherView.render(data);\r\n  } catch (err) {\r\n    // Alert the user of any errors\r\n    countryDetailsView.renderError(err);\r\n  }\r\n};\r\n\r\nconst init = function () {\r\n  modeSwitcherView.addHandlerLoad(controlModeSwitcherPageLoad);\r\n  modeSwitcherView.addHandlerClick(controlModeSwitcher);\r\n  countryDetailsView.addHandlerRender(controlCountryDetails);\r\n};\r\n\r\ninit();\r\n","export class CountryDetailsView {\r\n  _parentElement = document.querySelector(\".country-details\");\r\n  _data;\r\n  _errorMessage = \"We could not find a country with that name.\";\r\n  render(data) {\r\n    this._data = data;\r\n    let markup = \"\";\r\n    markup = this._generateMarkup();\r\n    this._clearMarkup();\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  }\r\n\r\n  getCountyName() {\r\n    const queryString = decodeURIComponent(\r\n      window.location.search.split(\"=\")[1]\r\n    );\r\n    return queryString;\r\n  }\r\n\r\n  addHandlerLoadCountry(render) {\r\n    [\"load\"].forEach((ev) => window.addEventListener(ev, render));\r\n  }\r\n\r\n  addHandlerRender(render) {\r\n    [\"load\"].forEach((ev) => window.addEventListener(ev, render));\r\n  }\r\n\r\n  renderSpinner = function () {\r\n    let markup = `<div class=\"loader-container\">\r\n    <div class=\"loader\"></div>\r\n    <div class=\"loader-text\">Loading...</div>\r\n    </div>`;\r\n    this._parentElement.innerHTML = \"\";\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  };\r\n\r\n  renderError(message = this._errorMessage) {\r\n    const markup = `<div class=\"message msg-danger\">\r\n    <div class=\"message-icon\">\r\n      <i class=\"ion-close-round\">\r\n      <img src=\"images/error_icon.svg\" alt=\"error\" />\r\n      </i>\r\n    </div>\r\n    <div class=\"message-content\">\r\n      <p>${message}</p>\r\n    </div>\r\n    <a href=\"_\" class=\"message-close\">\r\n      <img class=\"close-icon\" src=\"images/cross-icon.svg\" alt=\"close\" />\r\n    </a>  \r\n  </div>`;\r\n    this._parentElement.innerHTML = \"\";\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  }\r\n\r\n  _clearMarkup() {\r\n    this._parentElement.innerHTML = \"\";\r\n  }\r\n\r\n  _generateMarkup() {\r\n    let html = \"\";\r\n    if (this._data.length === 0) return;\r\n\r\n    html += `<article class=\"country-details__info\">\r\n    <img class=\"country-details__img\" alt=\"${this._data.name}\" src=\"${\r\n      this._data.flag\r\n    }\" />\r\n    <div class=\"country-details__data\">\r\n      <h1 class=\"heading-primary-large country-details__name\">${\r\n        this._data.name\r\n      }</h1>\r\n      <div class=\"country-details__basic-details-info\">\r\n      <p class=\"country-details__row\"><span>Native Name: </span>\r\n      ${!this._data.nativeName ? \"Not Found\" : this._data.nativeName}\r\n      </p>\r\n      <p class=\"country-details__row\"><span>Top Level Domain:</span>${\r\n        !this._data.topLevelDomain ? \"Not Found\" : this._data.topLevelDomain\r\n      } </p>\r\n      <p class=\"country-details__row\"><span>Population: </span>${this._data.population.toLocaleString()}</p>\r\n       <p class=\"country-details__row\"><span>Currencies: </span>\r\n      ${\r\n        typeof this._data.currencies === \"object\"\r\n          ? this._data.currencies[Object.keys(this._data.currencies)[0]].name\r\n          : \"\"\r\n      }\r\n      </p>\r\n\r\n      <p class=\"country-details__row\">\r\n      <span>Region:</span>${this._data.region}\r\n      </p>\r\n    \r\n      <p class=\"country-details__row\"><span>Languages: </span>\r\n      ${Object.entries(this._data.languages).map(([key, value]) => value)}\r\n      </p>\r\n      <p class=\"country-details__row\"><span>Sub Region: </span>${\r\n        this._data.subregion\r\n      }\r\n        </p>\r\n      <p class=\"country-details__row\"><span>Capital: </span>${\r\n        this._data.capital\r\n      }</p>\r\n      </div>\r\n      <div class=\"country-details__border-info\">\r\n        <p class=\"country-details__row\"><span>Border Countries: </span></p>\r\n        <div class=\"country-details__border-container\">\r\n        ${\r\n          this._data.borders\r\n            ? this._data.borders\r\n                .map(\r\n                  (border) =>\r\n                    `<a href=\"countryDetails.html?name=${border}\" class=\"country-details__border\" >${border}</a>`\r\n                )\r\n                .join(\"\")\r\n            : \"Not Found\"\r\n        }\r\n        </div>\r\n      </div>\r\n    </div>  \r\n  </article>`;\r\n\r\n    return html;\r\n  }\r\n}\r\n\r\nexport default new CountryDetailsView();\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0f1d4402dffacf5b$export$ca000e230c0caa3e","$0f1d4402dffacf5b$export$b159f842577c039","$0f1d4402dffacf5b$export$c8dee6738b0bfb71","$0f1d4402dffacf5b$export$295b74b5bfa1a9f4","$0f1d4402dffacf5b$export$475113bd78e16fc0","$0f1d4402dffacf5b$export$fb3f159b0e9d62f9","$0f1d4402dffacf5b$export$10961764e27601cc","$0f1d4402dffacf5b$export$2323b995609520dd","$0f1d4402dffacf5b$export$3e5c7dc73e3fd9a","$0f1d4402dffacf5b$export$b15082540cc0fc25","$fZ5A9","$i9R9q","currentMode","regions","countriesName","countyList","query","results","resultsPerPage","COUNTRY_PER_PAGE","page","countryDetails","name","nativeName","population","populationOnWord","region","subregion","capital","topLevelDomain","currencies","languages","borders","flag","localStorage","setItem","currentStMode","getItem","currentModeByStorage","countriesData","getJSON","API_URL","sort","countryA","countryB","common","localeCompare","error","countryNames","allCountries","map","country","Set","countries","countryName","trim","data","regionName","trimmedRegionName","countryData","flags","png","allCountriesData","filter","includes","cca3","end","slice","$ba30e20475feac5a$export$923ea8233b386e99","$ba30e20475feac5a$export$196440f71ed9f601","$ba30e20475feac5a$export$68641eeff6858e0f","$ba30e20475feac5a$export$470c370c53745de3","$d3824bf2ef2465db$export$d047a7c56db64af4","url","seconds","console","log","response","Promise","race","fetch","TIMEOUT_SEC","_","reject","setTimeout","ok","statusText","status","json","$1a8cc1083fd329eb$export$2e2bcd8739ae039","$1a8cc1083fd329eb$export$f5b15f0672111987","_modeSwitcher","document","querySelector","_switcherText","_modeSwitcherIcon","_data","render","_renderModeSwitcher","getCountyQuery","textContent","addHandlerLoad","window","addEventListener","addHandlerClick","root","style","setProperty","src","$1is5Y","$40e644d66125b8d9$export$79f519a718253de6","_parentElement","_errorMessage","markup","_generateMarkup","_clearMarkup","insertAdjacentHTML","getCountyName","decodeURIComponent","location","search","split","addHandlerLoadCountry","forEach","ev","addHandlerRender","renderSpinner","innerHTML","renderError","message","length","toLocaleString","keys","entries","key","value","border","join","$40e644d66125b8d9$export$2e2bcd8739ae039","$2hk5J","$3d39cf23b19d94b7$var$controlCountryDetails","CountryName","loadCountryDetails","state","SHOW_COUNTRIES_SEC","default","loadCurrentMode","getCurrentMode"],"version":3,"file":"countryDetails.db79b145.js.map"}