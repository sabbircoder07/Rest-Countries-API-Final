{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,Q,I,G,E,E,O,C,iB,I,G,E,E,O,C,kB,I,G,E,E,O,C,kB,I,G,E,E,O,C,4B,I,G,E,E,O,C,sB,I,G,E,E,O,C,qB,I,G,E,E,O,C,qB,I,G,I,E,E,S,E,E,SCGO,IAAM,EAAQ,CACnB,YAAa,GACb,QAAS,EAAE,CACX,cAAe,EAAE,CACjB,WAAY,CACV,MAAO,GACP,QAAS,EAAE,CACX,eAAgB,EAAA,gBAAe,CAC/B,KAAM,CACR,EACA,eAAgB,CACd,MAAO,GACP,KAAM,GACN,WAAY,GACZ,WAAY,GACZ,iBAAkB,GAClB,OAAQ,GACR,UAAW,GACX,QAAS,GACT,eAAgB,GAChB,WAAY,EAAE,CACd,UAAW,EAAE,CACb,QAAS,EAAE,CACX,KAAM,EACR,CACF,EAEa,EAAiB,SAAU,CAAW,EACjD,GAAI,CACF,aAAa,OAAO,CAAC,cAAe,GACpC,IAAM,EAAgB,aAAa,OAAO,CAAC,eACvC,GAAe,CAAA,EAAM,WAAW,CAAG,CAAvC,CACF,CAAE,MAAO,EAAK,CACZ,MAAM,CACR,QAAU,CACV,CACF,EAEa,EAAkB,SAAU,CAAW,EAClD,GAAI,CACF,IAAM,EAAuB,aAAa,OAAO,CAAC,eAC9C,EACF,EAAM,WAAW,CAAG,EAEpB,EAAM,WAAW,CAAG,CAExB,CAAE,MAAO,EAAK,CACZ,MAAM,CACR,QAAU,CACV,CACF,EAWa,EAAkB,iBAC7B,GAAI,CACF,IAAM,EAAgB,MAAM,AAAA,CAAA,EAAA,EAAA,OAAM,AAAN,EAC1B,CAAA,EAAG,EAAA,OAAM,CAAE,qGAAqG,CAAC,CAEnH,CAAA,EAA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","sources":["<anon>","src/js/model.js","src/js/config.js","src/js/helper.js","src/js/views/modeSwitcherView.js","src/js/controller.js","src/js/views/allCountryListView.js","src/js/views/view.js","src/js/views/regionListView.js","src/js/views/searchCountryView.js","src/js/views/paginationView.js","src/js/views/autocompleteView.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1is5Y\", function(module, exports) {\n\n$parcel$export(module.exports, \"state\", () => $0f1d4402dffacf5b$export$ca000e230c0caa3e);\n$parcel$export(module.exports, \"getCurrentMode\", () => $0f1d4402dffacf5b$export$b159f842577c039);\n$parcel$export(module.exports, \"loadCurrentMode\", () => $0f1d4402dffacf5b$export$c8dee6738b0bfb71);\n$parcel$export(module.exports, \"getAllCountries\", () => $0f1d4402dffacf5b$export$295b74b5bfa1a9f4);\n$parcel$export(module.exports, \"loadSearchResultByCountry\", () => $0f1d4402dffacf5b$export$10961764e27601cc);\n$parcel$export(module.exports, \"loadCountryByRegion\", () => $0f1d4402dffacf5b$export$2323b995609520dd);\n$parcel$export(module.exports, \"loadCountryDetails\", () => $0f1d4402dffacf5b$export$3e5c7dc73e3fd9a);\n$parcel$export(module.exports, \"getCountriesByPage\", () => $0f1d4402dffacf5b$export$b15082540cc0fc25);\n\nvar $fZ5A9 = parcelRequire(\"fZ5A9\");\n\nvar $i9R9q = parcelRequire(\"i9R9q\");\nconst $0f1d4402dffacf5b$export$ca000e230c0caa3e = {\n    currentMode: \"\",\n    regions: [],\n    countriesName: [],\n    countyList: {\n        query: \"\",\n        results: [],\n        resultsPerPage: (0, $fZ5A9.COUNTRY_PER_PAGE),\n        page: 1\n    },\n    countryDetails: {\n        query: \"\",\n        name: \"\",\n        nativeName: \"\",\n        population: \"\",\n        populationOnWord: \"\",\n        region: \"\",\n        subregion: \"\",\n        capital: \"\",\n        topLevelDomain: \"\",\n        currencies: [],\n        languages: [],\n        borders: [],\n        flag: \"\"\n    }\n};\nconst $0f1d4402dffacf5b$export$b159f842577c039 = function(currentMode) {\n    try {\n        localStorage.setItem(\"currentMode\", currentMode);\n        const currentStMode = localStorage.getItem(\"currentMode\");\n        if (currentStMode) $0f1d4402dffacf5b$export$ca000e230c0caa3e.currentMode = currentStMode;\n    } catch (err) {\n        throw err;\n    } finally{}\n};\nconst $0f1d4402dffacf5b$export$c8dee6738b0bfb71 = function(currentMode) {\n    try {\n        const currentModeByStorage = localStorage.getItem(\"currentMode\");\n        if (currentModeByStorage) $0f1d4402dffacf5b$export$ca000e230c0caa3e.currentMode = currentModeByStorage;\n        else $0f1d4402dffacf5b$export$ca000e230c0caa3e.currentMode = currentMode;\n    } catch (err) {\n        throw err;\n    } finally{}\n};\nconst $0f1d4402dffacf5b$export$295b74b5bfa1a9f4 = async function() {\n    try {\n        const countriesData = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}all?fields=name,flags,population,region,subregion,capital,topLevelDomain,currencies,languages,borders`);\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results = countriesData.sort((countryA, countryB)=>countryA.name.common.localeCompare(countryB.name.common));\n        const regions = countriesData.map((country)=>country.region);\n        // Remove duplicates from the list of regions and store the result in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.regions = [\n            ...new Set(regions)\n        ];\n        // Extract the common name of each country from the list of countries\n        const countryNames = countriesData.map((country)=>country.name.common);\n        // Remove duplicates from the list of country names\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countriesName = [\n            ...new Set(countryNames)\n        ];\n    } catch (error) {\n        throw error;\n    }\n};\nconst $0f1d4402dffacf5b$export$10961764e27601cc = async function(countryName) {\n    try {\n        // Trim the country name to remove any leading or trailing whitespace\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.query = countryName.trim();\n        // Make a GET request to the Rest Countries API to retrieve a list of countries that match the given country name\n        const data = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}name/${countryName.trim()}?fullText=true`);\n        // Store the list of countries in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results = data;\n    } catch (error) {\n        // Handle any errors that occur during the execution of the function\n        throw error;\n    } finally{\n    // Clean up any resources used by the function\n    }\n};\nconst $0f1d4402dffacf5b$export$2323b995609520dd = async function(regionName) {\n    try {\n        // Trim the region name to remove any leading or trailing whitespace\n        const trimmedRegionName = regionName.trim();\n        // Update the query in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.query = trimmedRegionName;\n        // Make a GET request to the Rest Countries API to retrieve countries in the specified region\n        const data = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}region/${trimmedRegionName}`);\n        // Store the retrieved list of countries in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results = data;\n    } catch (error) {\n        // Handle any errors that occur during the execution of the function\n        throw error;\n    } finally{\n    // Optionally, you can include any cleanup code here\n    }\n};\nconst $0f1d4402dffacf5b$export$3e5c7dc73e3fd9a = async function(countryName) {\n    try {\n        // Fetch country details from the API using the full-text search\n        const countryData = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}name/${countryName.trim()}?fullText=true`);\n        // Update the application state with the retrieved country details\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.name = countryData[0].name.common;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.nativeName = countryData[0].nativeName;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.population = countryData[0].population;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.region = countryData[0].region;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.subregion = countryData[0].subregion;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.capital = countryData[0].capital;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.topLevelDomain = countryData[0].topLevelDomain;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.currencies = countryData[0].currencies;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.languages = countryData[0].languages;\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.flag = countryData[0].flags.png;\n        // If the country has borders, fetch all countries and filter by borders\n        if (countryData[0].borders) {\n            const allCountriesData = await (0, $i9R9q.getJSON)(`${(0, $fZ5A9.API_URL)}all?fields=cca3,name,flags,population,region,subregion,capital,topLevelDomain,currencies,languages,borders`);\n            $0f1d4402dffacf5b$export$ca000e230c0caa3e.countryDetails.borders = allCountriesData.filter((country)=>countryData[0].borders.includes(country.cca3)).map((country)=>country.name.common);\n        }\n    } catch (err) {\n        // Handle any errors that occur during the execution of the function\n        throw err;\n    }\n};\nconst $0f1d4402dffacf5b$export$b15082540cc0fc25 = function(page = $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.page) {\n    try {\n        // Set the current page number in the application state\n        $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.page = page;\n        // Calculate the start and end indices of the slice of countries to retrieve\n        const start = 0;\n        const end = page * $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.resultsPerPage;\n        // Retrieve the slice of countries from the application state\n        return $0f1d4402dffacf5b$export$ca000e230c0caa3e.countyList.results.slice(start, end);\n    } catch (err) {\n        // Handle any errors that occur during the execution of the function\n        throw err;\n    }\n};\n\n});\nparcelRegister(\"fZ5A9\", function(module, exports) {\n\n$parcel$export(module.exports, \"API_URL\", () => $ba30e20475feac5a$export$923ea8233b386e99);\n$parcel$export(module.exports, \"TIMEOUT_SEC\", () => $ba30e20475feac5a$export$196440f71ed9f601);\n$parcel$export(module.exports, \"COUNTRY_PER_PAGE\", () => $ba30e20475feac5a$export$68641eeff6858e0f);\n$parcel$export(module.exports, \"SHOW_COUNTRIES_SEC\", () => $ba30e20475feac5a$export$470c370c53745de3);\nconst $ba30e20475feac5a$export$923ea8233b386e99 = \"https://restcountries.com/v3.1/\";\nconst $ba30e20475feac5a$export$196440f71ed9f601 = 20;\nconst $ba30e20475feac5a$export$68641eeff6858e0f = 20;\nconst $ba30e20475feac5a$export$470c370c53745de3 = 1;\n\n});\n\nparcelRegister(\"i9R9q\", function(module, exports) {\n\n$parcel$export(module.exports, \"getJSON\", () => $d3824bf2ef2465db$export$d047a7c56db64af4);\n\nvar $fZ5A9 = parcelRequire(\"fZ5A9\");\n/**\r\n * Returns a Promise that rejects with an error after a specified number of seconds.\r\n *\r\n * @param {number} seconds - The number of seconds to wait before rejecting the promise.\r\n * @returns {Promise<never>} A Promise that rejects with an error indicating the request took too long.\r\n *\r\n * @description\r\n * This function takes a number of seconds as an argument and returns a Promise that\r\n * automatically rejects after the specified number of seconds. The Promise is\r\n * rejected with an Error object that contains a message that describes the timeout.\r\n */ const $d3824bf2ef2465db$var$timeout = function(seconds) {\n    return new Promise(function(_, reject) {\n        setTimeout(()=>{\n            reject(new Error(`Request took too long! Timeout after ${seconds} second`));\n        }, seconds * 1000);\n    });\n};\nconst $d3824bf2ef2465db$export$d047a7c56db64af4 = async function(url) {\n    try {\n        console.log(url);\n        // Fetch the data from the given URL, and set a timeout of 5 seconds\n        const response = await Promise.race([\n            fetch(url),\n            $d3824bf2ef2465db$var$timeout((0, $fZ5A9.TIMEOUT_SEC))\n        ]);\n        // If the request was not successful, reject the Promise with an error\n        if (!response.ok) {\n            const error = new Error(`${response.statusText} ${response.status}`);\n            throw error;\n        }\n        // If the request was successful, parse the response data as JSON\n        const jsonData = await response.json();\n        // Return the parsed JSON data\n        return jsonData;\n    } catch (error) {\n        // If there was an error, rethrow it to the caller\n        console.log(error);\n        throw error;\n    }\n};\n\n});\n\n\nparcelRegister(\"2hk5J\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $1a8cc1083fd329eb$export$2e2bcd8739ae039);\nclass $1a8cc1083fd329eb$export$f5b15f0672111987 {\n    _modeSwitcher = document.querySelector(\".header__mode-switcher\");\n    _switcherText = document.querySelector(\".header__mode-switcher__text-box\");\n    _modeSwitcherIcon = document.querySelector(\".header__mode-switcher__icon\");\n    _data;\n    render(data) {\n        this._data = data;\n        this._renderModeSwitcher();\n    }\n    getCountyQuery(currentMode) {\n        if (!currentMode) return this._switcherText.textContent;\n        else {\n            if (currentMode == \"Dark Mode\") this._data = \"Light Mode\";\n            else if (currentMode == \"Light Mode\") this._data = \"Dark Mode\";\n            return this._data;\n        }\n    }\n    addHandlerLoad(render) {\n        window.addEventListener(\"load\", render);\n    }\n    addHandlerClick(render) {\n        this._modeSwitcher.addEventListener(\"click\", render);\n    }\n    _renderModeSwitcher() {\n        let root = document.querySelector(\":root\");\n        if (this._data == \"Dark Mode\") {\n            root.style.setProperty(\"--color-Very-Light-Gray-Light-Mode-Background\", \"hsl(207, 26%, 17%)\");\n            root.style.setProperty(\"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\", \"hsl(209, 23%, 22%)\");\n            root.style.setProperty(\"--color-Very-Dark-Blue-Light-Mode-Text\", \"hsl(0, 0%, 100%)\");\n            root.style.setProperty(\"--color-Dark-Gray-Light-Mode-Input\", \"hsl(0, 0%, 100%)\");\n            this._modeSwitcherIcon.src = \"https://shivanarrthine.com/public/images/icons/sun.svg\";\n        } else {\n            root.style.setProperty(\"--color-Very-Light-Gray-Light-Mode-Background\", \"hsl(0, 0%, 98%)\");\n            root.style.setProperty(\"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\", \"hsl(0, 0%, 100%)\");\n            root.style.setProperty(\"--color-Very-Dark-Blue-Light-Mode-Text\", \"hsl(200, 15%, 8%)\");\n            root.style.setProperty(\"--color-Dark-Gray-Light-Mode-Input\", \"hsl(0, 0%, 52%)\");\n            this._modeSwitcherIcon.src = \"https://shivanarrthine.com/public/images/icons/moon.svg\";\n        }\n        this._switcherText.textContent = this._data === \"Light Mode\" ? \"Dark Mode\" : \"Light Mode\";\n    }\n}\nvar $1a8cc1083fd329eb$export$2e2bcd8739ae039 = new $1a8cc1083fd329eb$export$f5b15f0672111987();\n\n});\n\n\nvar $1is5Y = parcelRequire(\"1is5Y\");\nclass $b2d7157267813d3a$export$27a5bd065ad55220 {\n    _parentElementSpinner = document.querySelector(\".countries\");\n    _errorMessage = \"We could not find a country with that name.\";\n    renderSpinner = function() {\n        let markup = `<div class=\"loader-container\">\n    <div class=\"loader\"></div>\n    <div class=\"loader-text\">Loading...</div>\n    </div>`;\n        this._parentElementSpinner.innerHTML = \"\";\n        this._parentElementSpinner.insertAdjacentHTML(\"beforeend\", markup);\n    };\n    /**\r\n   * Renders an error message with a close button to the DOM\r\n   * @param {string} [message=this._errorMessage] - The error message to be displayed\r\n   * @description\r\n   * Renders an error message to the DOM with a close button.\r\n   * If the message parameter is not provided, it defaults to _errorMessage.\r\n   */ renderError(message = this._errorMessage) {\n        const errorMarkup = `\n    <div class=\"message msg-danger\">\n      <div class=\"message-icon\">\n        <i class=\"ion-close-round\">\n          <img src=\"/src/images/error_icon.svg\" alt=\"error\" />\n        </i>\n      </div>\n      <div class=\"message-content\">\n        <p>${message}</p>\n      </div>\n      <a href=\"_\" class=\"message-close\">\n        <img class=\"close-icon\" src=\"/src/images/cross-icon.svg\" alt=\"close\" />\n      </a>\n    </div>\n  `;\n        this._parentElementSpinner.innerHTML = \"\";\n        this._parentElementSpinner.insertAdjacentHTML(\"beforeend\", errorMarkup);\n    }\n}\nvar $b2d7157267813d3a$export$2e2bcd8739ae039 = new $b2d7157267813d3a$export$27a5bd065ad55220();\n\n\nclass $b4512d59b693f66b$export$92201c97cb8ac3a5 {\n    _parentElement = document.querySelector(\".countries\");\n    _numberOfCountries = document.querySelector(\".header__numberOf-countries\");\n    _data;\n    render(data) {\n        this._data = data;\n        let markup = \"\";\n        markup = this._generateMarkup();\n        this._clearMarkup();\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    }\n    _clearMarkup() {\n        this._parentElement.innerHTML = \"\";\n    }\n    renderSpinner = function() {\n        let markup = `<div class=\"loader-container\">\n  <div class=\"loader\"></div>\n  <div class=\"loader-text\">Loading...</div>\n</div>`;\n        this._parentElement.innerHTML = \"\";\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    };\n    addHandlerRender(render) {\n        [\n            \"load\"\n        ].forEach((ev)=>window.addEventListener(ev, render));\n    }\n    _generateMarkup() {\n        let html = \"\";\n        if (this._data.length === 0) return;\n        else {\n            this._numberOfCountries.innerHTML = `${this._data.length} Countries Found`;\n            this._data.forEach((data, index)=>{\n                html += `\n        <a class=\"countries__link\" href=\"countryDetails.html?name=${data.name.common}\">\n        <article class=\"country\">\n    <img class=\"country__img\" src=\"${data.flags.png}\" />\n    <div class=\"country__number\"><span>${index + 1}</span></div>\n    <div class=\"country__data\">\n      <div class=\"country__heading-box\">\n      <h2 class=\"heading-secondary country__heading\">${data.name.common}</h2>\n      </div>\n      <div class=\"country__info-box\">\n      <p class=\"country__row\"><span>Population: </span>${data.population.toLocaleString()}</p>\n      <p class=\"country__row\"><span>Region: </span>${data.region}</p>\n      <p class=\"country__row\"><span>Capital: </span>${data.capital}</p>\n      </div>\n    </div>\n  </article>\n  </a>`;\n            });\n        }\n        return html;\n    }\n}\nvar $b4512d59b693f66b$export$2e2bcd8739ae039 = new $b4512d59b693f66b$export$92201c97cb8ac3a5();\n\n\nclass $96d45e9ec3ea75d7$export$6ff45ac75707e33b {\n    _parentElement = document.querySelector(\".region-list\");\n    _parentElementSpinner = document.querySelector(\".countries\");\n    _data;\n    /*************  ✨ Codeium Command ⭐  *************/ /**\r\n * Renders the list of regions by generating markup and inserting it\r\n * into the parent element.\r\n * @param {Array} data - An array of regions to be displayed.\r\n * @description\r\n * This function updates the internal data state, generates the necessary HTML\r\n * markup for the regions, clears any existing markup, and appends the newly\r\n  /******  1cd4bfc5-2312-4013-bc64-e1c0bc80469c  *******/ render(data) {\n        this._data = data;\n        let markup = \"\";\n        markup = this._generateMarkup();\n        this._clearMarkup();\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    }\n    _clearMarkup() {\n        this._parentElement.innerHTML = \"<option selected disabled>Filter by Region</option>\";\n    }\n    renderSpinner = function() {\n        let markup = `<div class=\"loader-container\">\n  <div class=\"loader\"></div>\n  <div class=\"loader-text\">Loading...</div>\n</div>`;\n        this._parentElementSpinner.innerHTML = \"\";\n        this._parentElementSpinner.insertAdjacentHTML(\"beforeend\", markup);\n    };\n    addHandlerRender(render) {\n        [\n            \"load\"\n        ].forEach((ev)=>window.addEventListener(ev, render));\n    }\n    _generateMarkup() {\n        let html = \"\";\n        if (this._data.length === 0) return;\n        this._data.forEach((region)=>{\n            html += `\n      <option class=\"region-list\" value=\"${region}\">${region}</option>    \n      `;\n        });\n        return html;\n    }\n}\nvar $96d45e9ec3ea75d7$export$2e2bcd8739ae039 = new $96d45e9ec3ea75d7$export$6ff45ac75707e33b();\n\n\n\nclass $0e54f03aa4172aac$var$SearCountryView {\n    _parentElementSearch = document.querySelector(\".cta__country-form\");\n    getCountyQuery(countryName) {\n        console.log(countryName);\n        if (!countryName) return this._parentElementSearch.querySelector(\".input__country-name\").value;\n        else return countryName;\n    }\n    clearInput() {\n        this._parentElementSearch.querySelector(\".input__country-name\").value = \"\";\n    }\n    getRegionQuery() {\n        return this._parentElementSearch.querySelector(\".region-list\").value;\n    }\n    addHandlerSearchCountry(handler) {\n        this._parentElementSearch.addEventListener(\"submit\", function(e) {\n            e.preventDefault();\n            handler();\n        });\n    }\n    addHandlerSearchCountryByRegion(handler) {\n        this._parentElementSearch.querySelector(\".region-list\").addEventListener(\"change\", function(e) {\n            e.preventDefault();\n            handler();\n        });\n    }\n}\nvar $0e54f03aa4172aac$export$2e2bcd8739ae039 = new $0e54f03aa4172aac$var$SearCountryView();\n\n\n\nvar $2hk5J = parcelRequire(\"2hk5J\");\nclass $cfa940594ee109f7$var$PaginationView {\n    _parentElement = document.querySelector(\".pagination\");\n    _numberOfCountries = document.querySelector(\".header__numberOf-countries\");\n    _data;\n    render(data) {\n        this._data = data;\n        let markup = \"\";\n        markup = this._generateMarkup();\n        this._clearMarkup();\n        this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\n    }\n    addHandlerClick(handler) {\n        this._parentElement.addEventListener(\"click\", function(e) {\n            e.preventDefault();\n            const btn = e.target.closest(\".pagination__btn-view-all\");\n            if (!btn) return;\n            const goToPage = +btn.dataset.goto;\n            handler(goToPage);\n        });\n    }\n    _generateMarkup() {\n        if (this._data.results.length === 0) return;\n        const numOfPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);\n        this._numberOfCountries.innerHTML = \"\";\n        this._numberOfCountries.innerHTML = `Showing <span>${this._data.page != numOfPages ? this._data.resultsPerPage * this._data.page : this._data.results.length} </span> out of <span>${this._data.results.length}</span> Countries`;\n        if (this._data.page === 1 && numOfPages > 1) return `<button data-goto=\"${numOfPages}\" class=\"pagination__btn pagination__btn-view-all\">Show All ${this._data.results.length} Countries \\u{2192}</button>`;\n        return \"\";\n    }\n    _clearMarkup() {\n        this._parentElement.innerHTML = \"\";\n    }\n}\nvar $cfa940594ee109f7$export$2e2bcd8739ae039 = new $cfa940594ee109f7$var$PaginationView();\n\n\n\nvar $fZ5A9 = parcelRequire(\"fZ5A9\");\n\nclass $e991ed56cd29ee30$export$d2b6db6a7279fa83 {\n    _parentElement = document.querySelector(\"#countryName\");\n    _parentElementSearch = document.querySelector(\".cta__country-form\");\n    _autocompleteItem = document.querySelector(\".autocompleteItem\");\n    _data;\n    countryName;\n    render(data) {\n        this._data = data;\n        this.autocomplete(this._parentElement, this._data);\n    }\n    autocomplete = function(inputElement, dataArray) {\n        let currentFocus = -1;\n        inputElement.addEventListener(\"input\", function(e) {\n            let i, val = this.value;\n            closeAllLists();\n            if (!val) return false;\n            currentFocus = -1;\n            let autocompleteContainer = document.createElement(\"div\");\n            autocompleteContainer.setAttribute(\"id\", this.id + \"autocomplete-list\");\n            autocompleteContainer.setAttribute(\"class\", \"autocomplete-items\");\n            this.parentNode.appendChild(autocompleteContainer);\n            for(i = 0; i < dataArray.length; i++)if (dataArray[i].substr(0, val.length).toUpperCase() === val.toUpperCase()) {\n                let autocompleteItem = document.createElement(\"div\");\n                autocompleteItem.innerHTML = \"<strong>\" + dataArray[i].substr(0, val.length) + \"</strong>\";\n                autocompleteItem.innerHTML += dataArray[i].substr(val.length);\n                let hiddenInput = document.createElement(\"input\");\n                hiddenInput.type = \"hidden\";\n                hiddenInput.value = dataArray[i];\n                autocompleteItem.appendChild(hiddenInput);\n                autocompleteContainer.appendChild(autocompleteItem);\n                autocompleteItem.addEventListener(\"click\", function(e) {\n                    e.preventDefault();\n                    inputElement.value = this.getElementsByTagName(\"input\")[0].value;\n                    this.countryName = this.getElementsByTagName(\"input\")[0].value;\n                    $f50bd1f2915ed0f2$export$71cf45bfef3d8dd2(this.countryName);\n                    closeAllLists();\n                });\n            }\n        });\n        inputElement.addEventListener(\"keydown\", function(e) {\n            let listItems = document.getElementById(this.id + \"autocomplete-list\").getElementsByTagName(\"div\");\n            if (e.keyCode === 40) {\n                currentFocus++;\n                addActive(listItems);\n            } else if (e.keyCode === 38) {\n                currentFocus--;\n                addActive(listItems);\n            } else if (e.keyCode === 13) {\n                e.preventDefault();\n                if (currentFocus > -1) {\n                    if (listItems) listItems[currentFocus].click();\n                }\n            }\n        });\n        function addActive(listItems) {\n            removeActive(listItems);\n            if (currentFocus >= listItems.length) currentFocus = 0;\n            if (currentFocus < 0) currentFocus = listItems.length - 1;\n            listItems[currentFocus].classList.add(\"autocomplete-active\");\n        }\n        function removeActive(listItems) {\n            for(let i = 0; i < listItems.length; i++)listItems[i].classList.remove(\"autocomplete-active\");\n        }\n        function closeAllLists(element) {\n            let listItems = document.getElementsByClassName(\"autocomplete-items\");\n            for(let i = 0; i < listItems.length; i++)if (element !== listItems[i] && element !== inputElement) listItems[i].parentNode.removeChild(listItems[i]);\n        }\n        document.addEventListener(\"click\", function(e) {\n            closeAllLists(e.target);\n        });\n    };\n}\nvar $e991ed56cd29ee30$export$2e2bcd8739ae039 = new $e991ed56cd29ee30$export$d2b6db6a7279fa83();\n\n\n/**\r\n * Fetches the information of all countries from the Rest Countries API\r\n * and renders them onto the page with pagination.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves all countries from the API and displays them\r\n * on the page. It also includes pagination functionality to manage the\r\n * display of countries across different pages. A loading spinner is shown\r\n * while the data is being fetched. In case of an error, an error message\r\n * is displayed to the user.\r\n */ const $f50bd1f2915ed0f2$var$controlAllCountryInformation = async function() {\n    try {\n        // Display a loading spinner while fetching data\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderSpinner();\n        // Fetch all countries from the API and store them in the application state\n        await $1is5Y.getAllCountries();\n        // Retrieve the list of regions from the application state\n        const regionsData = $1is5Y.state.regions;\n        // Render the list of regions on the page\n        (0, $96d45e9ec3ea75d7$export$2e2bcd8739ae039).render(regionsData);\n        // Retrieve the fetched country names from the application state\n        const countriesNameData = $1is5Y.state.countriesName;\n        // Render the autocomplete view with the retrieved data\n        (0, $e991ed56cd29ee30$export$2e2bcd8739ae039).render(countriesNameData);\n        const data = $1is5Y.getCountriesByPage();\n        // Render the list of countries on the page\n        (0, $b4512d59b693f66b$export$2e2bcd8739ae039).render(data);\n        // Render the pagination controls\n        (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($1is5Y.state.countyList);\n    } catch (err) {\n        // Handle any errors that occur during the execution of the function\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\n/**\r\n * Retrieves a list of countries from the Rest Countries API that match the given country name,\r\n * and displays them on the page. The list of countries is paginated and a loading spinner is\r\n * shown while the data is being fetched. In case of an error, an error message is displayed\r\n * to the user.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves a list of countries from the API that match the given country name,\r\n * and displays them on the page. The list of countries is paginated across different pages,\r\n * and a loading spinner is shown while the data is being fetched. In case of an error, an\r\n * error message is displayed to the user.\r\n */ const $f50bd1f2915ed0f2$var$controlLoadSearchResultByCountry = async function() {\n    try {\n        // Get the country query from the search input\n        const country = (0, $0e54f03aa4172aac$export$2e2bcd8739ae039).getCountyQuery();\n        // If no country is provided, exit the function\n        if (!country) return;\n        // Render a loading spinner while fetching data\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderSpinner();\n        // Load the search result for the given country from the API\n        await $1is5Y.loadSearchResultByCountry(country);\n        // Delay the rendering to simulate loading time, then render the countries and pagination\n        setTimeout(function() {\n            // Retrieve a slice of countries for the current page\n            const data = $1is5Y.getCountriesByPage();\n            // Render the list of countries on the page\n            (0, $b4512d59b693f66b$export$2e2bcd8739ae039).render(data);\n            // Render the pagination controls\n            (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($1is5Y.state.countyList);\n        }, $fZ5A9.SHOW_COUNTRIES_SEC * 1000);\n    } catch (err) {\n        // Display an error message to the user if an error occurs\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\nconst $f50bd1f2915ed0f2$export$71cf45bfef3d8dd2 = async function(country) {\n    try {\n        // If no country name is provided, exit the function\n        if (!country) return;\n        // Display a loading spinner while fetching data\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderSpinner();\n        // Load the search result for the given country from the API\n        await $1is5Y.loadSearchResultByCountry(country);\n        // Delay the rendering to simulate loading time, then render the countries and pagination\n        setTimeout(function() {\n            // Retrieve a slice of countries for the current page\n            const data = $1is5Y.getCountriesByPage();\n            // Render the list of countries on the page\n            (0, $b4512d59b693f66b$export$2e2bcd8739ae039).render(data);\n            // Render the pagination controls\n            (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($1is5Y.state.countyList);\n        }, $fZ5A9.SHOW_COUNTRIES_SEC * 1000);\n    } catch (err) {\n        // Alert the user of any errors\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\n/**\r\n * Loads and renders a list of countries from the API that are located in the\r\n * given region. A loading spinner is shown while the data is being fetched.\r\n * In case of an error, an error message is displayed to the user.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves a list of countries from the API that are located in\r\n * the given region, and displays them on the page. The list of countries is\r\n * paginated across different pages, and a loading spinner is shown while the\r\n * data is being fetched. In case of an error, an error message is displayed to\r\n * the user.\r\n *\r\n * @example\r\n * controlLoadCountryByRegion();\r\n */ const $f50bd1f2915ed0f2$var$controlLoadCountryByRegion = async function() {\n    try {\n        // Get the region query from the search input\n        const region = (0, $0e54f03aa4172aac$export$2e2bcd8739ae039).getRegionQuery();\n        // If no region is provided, exit the function\n        if (!region) return;\n        // Display a loading spinner while fetching data\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderSpinner();\n        // Load the countries by region from the API\n        await $1is5Y.loadCountryByRegion(region);\n        // Delay the rendering to simulate loading time, then render the countries and pagination\n        setTimeout(function() {\n            // Retrieve a slice of countries for the current page\n            const data = $1is5Y.getCountriesByPage();\n            // Render the list of countries on the page\n            (0, $b4512d59b693f66b$export$2e2bcd8739ae039).render(data);\n            // Clear the search input\n            (0, $0e54f03aa4172aac$export$2e2bcd8739ae039).clearInput();\n            // Render the pagination controls\n            (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($1is5Y.state.countyList);\n        }, $fZ5A9.SHOW_COUNTRIES_SEC * 1000);\n    } catch (err) {\n        // Alert the user of any errors\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\n/**\r\n * Handles the mode switcher button click event and updates the application state\r\n * and the UI to reflect the new mode. If an error occurs during the execution\r\n * of the function, an error message is displayed to the user.\r\n * @function\r\n * @description\r\n * This function retrieves the current mode from the application state, and\r\n * updates the state with the new mode when the user clicks the mode switcher\r\n * button. The function also renders the new mode on the page, and in case of\r\n * an error, displays an error message to the user.\r\n *\r\n * @example\r\n * controlModeSwitcher();\r\n */ const $f50bd1f2915ed0f2$var$controlModeSwitcher = function() {\n    try {\n        // Get the current mode from the state\n        const currentMode = (0, $2hk5J.default).getCountyQuery($1is5Y.state.currentMode);\n        // If the current mode is not available, exit the function\n        if (!currentMode) return;\n        // Update the state with the new mode\n        $1is5Y.getCurrentMode(currentMode);\n        // Render the new mode on the page\n        const data = $1is5Y.state.currentMode;\n        (0, $2hk5J.default).render(data);\n    } catch (err) {\n        // Display an error message to the user if an error occurs\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\n/**\r\n * Handles the page load event by loading the current mode from the state and\r\n * rendering it on the page. If an error occurs during the execution of the\r\n * function, an error message is displayed to the user.\r\n * @function\r\n * @description\r\n * This function retrieves the current mode from the application state, and\r\n * renders it on the page. In case of an error, an error message is displayed\r\n * to the user.\r\n *\r\n * @example\r\n * controlModeSwitcherPageLoad();\r\n */ const $f50bd1f2915ed0f2$var$controlModeSwitcherPageLoad = function() {\n    try {\n        // Load the current mode from localStorage or set to default \"Light Mode\"\n        $1is5Y.loadCurrentMode(\"Light Mode\");\n        // Retrieve the current mode from the application's state\n        const data = $1is5Y.state.currentMode;\n        // Render the current mode on the page using modeSwitcherView\n        (0, $2hk5J.default).render(data);\n    } catch (err) {\n        // Display an error message if an error occurs\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\n/**\r\n * Handles the pagination controls click event and updates the application\r\n * state and the UI to reflect the new page. If an error occurs during the\r\n * execution of the function, an error message is displayed to the user.\r\n * @function\r\n * @description\r\n * This function retrieves a slice of countries for the given page number\r\n * from the application state, and renders them on the page. The function\r\n * also renders the pagination controls on the page. In case of an error,\r\n * an error message is displayed to the user.\r\n *\r\n * @param {number} goToPage - The page number to go to.\r\n * @example\r\n * controlPagination(1);\r\n */ const $f50bd1f2915ed0f2$var$controlPagination = function(goToPage) {\n    try {\n        // Retrieve a slice of countries for the specified page\n        const data = $1is5Y.getCountriesByPage(goToPage);\n        // Render the list of countries on the page\n        (0, $b4512d59b693f66b$export$2e2bcd8739ae039).render(data);\n        // Render the pagination controls on the page\n        (0, $cfa940594ee109f7$export$2e2bcd8739ae039).render($1is5Y.state.countyList);\n    } catch (err) {\n        // Display an error message to the user if an error occurs\n        (0, $b2d7157267813d3a$export$2e2bcd8739ae039).renderError(err);\n    }\n};\n/**\r\n * Initializes event handlers for various UI components in the application.\r\n * This function sets up event handlers for UI components such as the mode\r\n * switcher, region list, country list, search input, and pagination controls.\r\n * It also triggers the autocomplete functionality for country names. This\r\n * setup ensures that the application responds to user interactions and\r\n * updates the UI accordingly.\r\n *\r\n * @function\r\n * @description\r\n * Sets up event handlers for the following UI components:\r\n *  - Mode switcher\r\n *  - Region list\r\n *  - Country list\r\n *  - Search input\r\n *  - Pagination controls\r\n * Also triggers the autocomplete functionality for country names.\r\n */ const $f50bd1f2915ed0f2$var$init = function() {\n    // Add event handler for mode switcher\n    (0, $2hk5J.default).addHandlerLoad($f50bd1f2915ed0f2$var$controlModeSwitcherPageLoad);\n    (0, $2hk5J.default).addHandlerClick($f50bd1f2915ed0f2$var$controlModeSwitcher);\n    // Add event handler for country list\n    (0, $b4512d59b693f66b$export$2e2bcd8739ae039).addHandlerRender($f50bd1f2915ed0f2$var$controlAllCountryInformation);\n    // Add event handlers for search input\n    (0, $0e54f03aa4172aac$export$2e2bcd8739ae039).addHandlerSearchCountry($f50bd1f2915ed0f2$var$controlLoadSearchResultByCountry);\n    (0, $0e54f03aa4172aac$export$2e2bcd8739ae039).addHandlerSearchCountryByRegion($f50bd1f2915ed0f2$var$controlLoadCountryByRegion);\n    // Add event handler for pagination controls\n    (0, $cfa940594ee109f7$export$2e2bcd8739ae039).addHandlerClick($f50bd1f2915ed0f2$var$controlPagination);\n};\n$f50bd1f2915ed0f2$var$init();\n\n\n//# sourceMappingURL=index.97dbaeef.js.map\n","import { API_URL, COUNTRY_PER_PAGE } from \"./config.js\";\r\nimport { getJSON } from \"./helper.js\";\r\n\r\nexport const state = {\r\n  currentMode: \"\",\r\n  regions: [],\r\n  countriesName: [],\r\n  countyList: {\r\n    query: \"\",\r\n    results: [],\r\n    resultsPerPage: COUNTRY_PER_PAGE,\r\n    page: 1,\r\n  },\r\n  countryDetails: {\r\n    query: \"\",\r\n    name: \"\",\r\n    nativeName: \"\",\r\n    population: \"\",\r\n    populationOnWord: \"\",\r\n    region: \"\",\r\n    subregion: \"\",\r\n    capital: \"\",\r\n    topLevelDomain: \"\",\r\n    currencies: [],\r\n    languages: [],\r\n    borders: [],\r\n    flag: \"\",\r\n  },\r\n};\r\n\r\nexport const getCurrentMode = function (currentMode) {\r\n  try {\r\n    localStorage.setItem(\"currentMode\", currentMode);\r\n    const currentStMode = localStorage.getItem(\"currentMode\");\r\n    if (currentStMode) state.currentMode = currentStMode;\r\n  } catch (err) {\r\n    throw err;\r\n  } finally {\r\n  }\r\n};\r\n\r\nexport const loadCurrentMode = function (currentMode) {\r\n  try {\r\n    const currentModeByStorage = localStorage.getItem(\"currentMode\");\r\n    if (currentModeByStorage) {\r\n      state.currentMode = currentModeByStorage;\r\n    } else {\r\n      state.currentMode = currentMode;\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  } finally {\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches and stores a sorted list of all countries from the Rest Countries API.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * Retrieves all countries from the Rest Countries API, sorts them by name,\r\n * and updates the application state.\r\n */\r\nexport const getAllCountries = async function () {\r\n  try {\r\n    const countriesData = await getJSON(\r\n      `${API_URL}all?fields=name,flags,population,region,subregion,capital,topLevelDomain,currencies,languages,borders`\r\n    );\r\n    state.countyList.results = countriesData.sort((countryA, countryB) =>\r\n      countryA.name.common.localeCompare(countryB.name.common)\r\n    );\r\n\r\n    const regions = countriesData.map((country) => country.region);\r\n    // Remove duplicates from the list of regions and store the result in the application state\r\n    state.regions = [...new Set(regions)];\r\n\r\n    // Extract the common name of each country from the list of countries\r\n    const countryNames = countriesData.map((country) => country.name.common);\r\n\r\n    // Remove duplicates from the list of country names\r\n    state.countriesName = [...new Set(countryNames)];\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a list of countries from the Rest Countries API that match the given country name, and updates the application state with the result.\r\n * @async\r\n * @function\r\n * @param {string} countryName - The country name to search for. The country name is trimmed to remove any leading or trailing whitespace.\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves a list of countries that match the given country name.\r\n * The list of countries is stored in the application state. The `fullText=true` parameter is used to search for countries using the full-text search.\r\n * The list of countries is stored in the application state.\r\n *\r\n * @example\r\n * import { loadSearchResultByCountry } from \"./model.js\";\r\n * loadSearchResultByCountry(\"Nigeria\");\r\n */\r\nexport const loadSearchResultByCountry = async function (countryName) {\r\n  try {\r\n    // Trim the country name to remove any leading or trailing whitespace\r\n    state.countyList.query = countryName.trim();\r\n\r\n    // Make a GET request to the Rest Countries API to retrieve a list of countries that match the given country name\r\n    const data = await getJSON(\r\n      `${API_URL}name/${countryName.trim()}?fullText=true`\r\n    );\r\n\r\n    // Store the list of countries in the application state\r\n    state.countyList.results = data;\r\n  } catch (error) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw error;\r\n  } finally {\r\n    // Clean up any resources used by the function\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a list of countries from the Rest Countries API that are located in the given region,\r\n * and updates the application state with the result.\r\n * @async\r\n * @function\r\n * @param {string} regionName - The region to search for. The region name is trimmed to remove any leading or trailing whitespace.\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves a list of countries that are located in the given region.\r\n * The list of countries is stored in the application state.\r\n *\r\n * @example\r\n * import { loadCountryByRegion } from \"./model.js\";\r\n * loadCountryByRegion(\"Africa\");\r\n */\r\nexport const loadCountryByRegion = async function (regionName) {\r\n  try {\r\n    // Trim the region name to remove any leading or trailing whitespace\r\n    const trimmedRegionName = regionName.trim();\r\n\r\n    // Update the query in the application state\r\n    state.countyList.query = trimmedRegionName;\r\n\r\n    // Make a GET request to the Rest Countries API to retrieve countries in the specified region\r\n    const data = await getJSON(`${API_URL}region/${trimmedRegionName}`);\r\n\r\n    // Store the retrieved list of countries in the application state\r\n    state.countyList.results = data;\r\n  } catch (error) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw error;\r\n  } finally {\r\n    // Optionally, you can include any cleanup code here\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the details of a given country from the Rest Countries API and updates the application state with the result.\r\n * @async\r\n * @function\r\n * @param {string} countryName - The name of the country to retrieve details about.\r\n * @returns {Promise<void>}\r\n * @description\r\n * Makes a GET request to the Rest Countries API and retrieves the details of the given country.\r\n * The retrieved data is then stored in the application state.\r\n * The `fullText=true` parameter is used to search for countries using the full-text search.\r\n *\r\n * @example\r\n * import { loadCountryDetails } from \"./model.js\";\r\n * loadCountryDetails(\"Nigeria\");\r\n */\r\nexport const loadCountryDetails = async function (countryName) {\r\n  try {\r\n    // Fetch country details from the API using the full-text search\r\n    const countryData = await getJSON(\r\n      `${API_URL}name/${countryName.trim()}?fullText=true`\r\n    );\r\n\r\n    // Update the application state with the retrieved country details\r\n    state.countryDetails.name = countryData[0].name.common;\r\n    state.countryDetails.nativeName = countryData[0].nativeName;\r\n    state.countryDetails.population = countryData[0].population;\r\n    state.countryDetails.region = countryData[0].region;\r\n    state.countryDetails.subregion = countryData[0].subregion;\r\n    state.countryDetails.capital = countryData[0].capital;\r\n    state.countryDetails.topLevelDomain = countryData[0].topLevelDomain;\r\n    state.countryDetails.currencies = countryData[0].currencies;\r\n    state.countryDetails.languages = countryData[0].languages;\r\n    state.countryDetails.flag = countryData[0].flags.png;\r\n\r\n    // If the country has borders, fetch all countries and filter by borders\r\n    if (countryData[0].borders) {\r\n      const allCountriesData = await getJSON(\r\n        `${API_URL}all?fields=cca3,name,flags,population,region,subregion,capital,topLevelDomain,currencies,languages,borders`\r\n      );\r\n      state.countryDetails.borders = allCountriesData\r\n        .filter((country) => countryData[0].borders.includes(country.cca3))\r\n        .map((country) => country.name.common);\r\n    }\r\n  } catch (err) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a slice of the list of countries in the application state, where the\r\n * slice is determined by the given page number.\r\n *\r\n * @param {number} [page=state.countyList.page] - The page number to retrieve.\r\n * @returns {Country[]} - A slice of the list of countries.\r\n * @description\r\n * This function retrieves a subset of the list of countries in the application\r\n * state, where the subset is determined by the given page number. The subset is\r\n * retrieved by slicing the list of countries starting from the first element\r\n * up to the element at the given page number multiplied by the number of\r\n * countries to display per page.\r\n *\r\n * @example\r\n * import { getCountriesByPage } from \"./model.js\";\r\n * const countries = getCountriesByPage(1);\r\n * console.log(countries);\r\n */\r\nexport const getCountriesByPage = function (page = state.countyList.page) {\r\n  try {\r\n    // Set the current page number in the application state\r\n    state.countyList.page = page;\r\n\r\n    // Calculate the start and end indices of the slice of countries to retrieve\r\n    const start = 0;\r\n    const end = page * state.countyList.resultsPerPage;\r\n\r\n    // Retrieve the slice of countries from the application state\r\n    return state.countyList.results.slice(start, end);\r\n  } catch (err) {\r\n    // Handle any errors that occur during the execution of the function\r\n    throw err;\r\n  }\r\n};\r\n","export const API_URL = \"https://restcountries.com/v3.1/\";\r\nexport const TIMEOUT_SEC = 20;\r\nexport const COUNTRY_PER_PAGE = 20;\r\nexport const SHOW_COUNTRIES_SEC = 1;\r\n","import { TIMEOUT_SEC } from \"./config.js\";\r\n\r\n/**\r\n * Returns a Promise that rejects with an error after a specified number of seconds.\r\n *\r\n * @param {number} seconds - The number of seconds to wait before rejecting the promise.\r\n * @returns {Promise<never>} A Promise that rejects with an error indicating the request took too long.\r\n *\r\n * @description\r\n * This function takes a number of seconds as an argument and returns a Promise that\r\n * automatically rejects after the specified number of seconds. The Promise is\r\n * rejected with an Error object that contains a message that describes the timeout.\r\n */\r\nconst timeout = function (seconds) {\r\n  return new Promise(function (_, reject) {\r\n    setTimeout(() => {\r\n      reject(\r\n        new Error(`Request took too long! Timeout after ${seconds} second`)\r\n      );\r\n    }, seconds * 1000);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetches data from the specified URL and returns it in JSON format.\r\n *\r\n * @async\r\n * @function\r\n * @param {string} url - The URL to fetch data from.\r\n * @returns {Promise<Object>} A Promise that resolves with the JSON data from the given URL.\r\n * @throws {Error} If the request was unsuccessful or timed out.\r\n *\r\n * @description\r\n * This function takes a URL as an argument, fetches the data from that URL, and\r\n * returns it in JSON format. It will wait for a maximum of 5 seconds for the\r\n * request to complete before rejecting the Promise with a timeout error.\r\n * If the request is successful, but the response status is not 200, the Promise\r\n * will also be rejected with an error containing the message from the response\r\n * and the status code.\r\n */\r\nexport const getJSON = async function (url) {\r\n  try {\r\n    console.log(url);\r\n    // Fetch the data from the given URL, and set a timeout of 5 seconds\r\n    const response = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]);\r\n\r\n    // If the request was not successful, reject the Promise with an error\r\n    if (!response.ok) {\r\n      const error = new Error(`${response.statusText} ${response.status}`);\r\n      throw error;\r\n    }\r\n\r\n    // If the request was successful, parse the response data as JSON\r\n    const jsonData = await response.json();\r\n\r\n    // Return the parsed JSON data\r\n    return jsonData;\r\n  } catch (error) {\r\n    // If there was an error, rethrow it to the caller\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n","export class ModeSwitcherView {\r\n  _modeSwitcher = document.querySelector(\".header__mode-switcher\");\r\n  _switcherText = document.querySelector(\".header__mode-switcher__text-box\");\r\n  _modeSwitcherIcon = document.querySelector(\".header__mode-switcher__icon\");\r\n  _data;\r\n\r\n  render(data) {\r\n    this._data = data;\r\n    this._renderModeSwitcher();\r\n  }\r\n\r\n  getCountyQuery(currentMode) {\r\n    if (!currentMode) {\r\n      return this._switcherText.textContent;\r\n    } else {\r\n      if (currentMode == \"Dark Mode\") {\r\n        this._data = \"Light Mode\";\r\n      } else if (currentMode == \"Light Mode\") {\r\n        this._data = \"Dark Mode\";\r\n      }\r\n      return this._data;\r\n    }\r\n  }\r\n\r\n  addHandlerLoad(render) {\r\n    window.addEventListener(\"load\", render);\r\n  }\r\n\r\n  addHandlerClick(render) {\r\n    this._modeSwitcher.addEventListener(\"click\", render);\r\n  }\r\n\r\n  _renderModeSwitcher() {\r\n    let root = document.querySelector(\":root\");\r\n    if (this._data == \"Dark Mode\") {\r\n      root.style.setProperty(\r\n        \"--color-Very-Light-Gray-Light-Mode-Background\",\r\n        \"hsl(207, 26%, 17%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\",\r\n        \"hsl(209, 23%, 22%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Very-Dark-Blue-Light-Mode-Text\",\r\n        \"hsl(0, 0%, 100%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Dark-Gray-Light-Mode-Input\",\r\n        \"hsl(0, 0%, 100%)\"\r\n      );\r\n      this._modeSwitcherIcon.src =\r\n        \"https://shivanarrthine.com/public/images/icons/sun.svg\";\r\n    } else {\r\n      root.style.setProperty(\r\n        \"--color-Very-Light-Gray-Light-Mode-Background\",\r\n        \"hsl(0, 0%, 98%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-White-Dark-Mode-Text-and-Light-Mode-Elements\",\r\n        \"hsl(0, 0%, 100%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Very-Dark-Blue-Light-Mode-Text\",\r\n        \"hsl(200, 15%, 8%)\"\r\n      );\r\n      root.style.setProperty(\r\n        \"--color-Dark-Gray-Light-Mode-Input\",\r\n        \"hsl(0, 0%, 52%)\"\r\n      );\r\n      this._modeSwitcherIcon.src =\r\n        \"https://shivanarrthine.com/public/images/icons/moon.svg\";\r\n    }\r\n    this._switcherText.textContent =\r\n      this._data === \"Light Mode\" ? \"Dark Mode\" : \"Light Mode\";\r\n  }\r\n}\r\n\r\nexport default new ModeSwitcherView();\r\n","import * as model from \"./model.js\";\r\nimport countriesView from \"./views/allCountryListView.js\";\r\nimport regionsView from \"./views/regionListView.js\";\r\nimport view from \"./views/view.js\";\r\nimport searchCountryView from \"./views/searchCountryView.js\";\r\nimport modeSwitcherView from \"./views/modeSwitcherView.js\";\r\nimport paginationView from \"./views/paginationView.js\";\r\nimport * as config from \"./config.js\";\r\nimport autocompleteView from \"./views/autocompleteView.js\";\r\n\r\n/**\r\n * Fetches the information of all countries from the Rest Countries API\r\n * and renders them onto the page with pagination.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves all countries from the API and displays them\r\n * on the page. It also includes pagination functionality to manage the\r\n * display of countries across different pages. A loading spinner is shown\r\n * while the data is being fetched. In case of an error, an error message\r\n * is displayed to the user.\r\n */\r\nconst controlAllCountryInformation = async function () {\r\n  try {\r\n    // Display a loading spinner while fetching data\r\n    view.renderSpinner();\r\n\r\n    // Fetch all countries from the API and store them in the application state\r\n    await model.getAllCountries();\r\n\r\n    // Retrieve the list of regions from the application state\r\n    const regionsData = model.state.regions;\r\n\r\n    // Render the list of regions on the page\r\n    regionsView.render(regionsData);\r\n\r\n    // Retrieve the fetched country names from the application state\r\n    const countriesNameData = model.state.countriesName;\r\n    // Render the autocomplete view with the retrieved data\r\n    autocompleteView.render(countriesNameData);\r\n\r\n    const data = model.getCountriesByPage();\r\n\r\n    // Render the list of countries on the page\r\n    countriesView.render(data);\r\n\r\n    // Render the pagination controls\r\n    paginationView.render(model.state.countyList);\r\n  } catch (err) {\r\n    // Handle any errors that occur during the execution of the function\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a list of countries from the Rest Countries API that match the given country name,\r\n * and displays them on the page. The list of countries is paginated and a loading spinner is\r\n * shown while the data is being fetched. In case of an error, an error message is displayed\r\n * to the user.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves a list of countries from the API that match the given country name,\r\n * and displays them on the page. The list of countries is paginated across different pages,\r\n * and a loading spinner is shown while the data is being fetched. In case of an error, an\r\n * error message is displayed to the user.\r\n */\r\nconst controlLoadSearchResultByCountry = async function () {\r\n  try {\r\n    // Get the country query from the search input\r\n    const country = searchCountryView.getCountyQuery();\r\n\r\n    // If no country is provided, exit the function\r\n    if (!country) return;\r\n\r\n    // Render a loading spinner while fetching data\r\n    view.renderSpinner();\r\n\r\n    // Load the search result for the given country from the API\r\n    await model.loadSearchResultByCountry(country);\r\n\r\n    // Delay the rendering to simulate loading time, then render the countries and pagination\r\n    setTimeout(function () {\r\n      // Retrieve a slice of countries for the current page\r\n      const data = model.getCountriesByPage();\r\n\r\n      // Render the list of countries on the page\r\n      countriesView.render(data);\r\n\r\n      // Render the pagination controls\r\n      paginationView.render(model.state.countyList);\r\n    }, config.SHOW_COUNTRIES_SEC * 1000);\r\n  } catch (err) {\r\n    // Display an error message to the user if an error occurs\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves a list of countries from the API that match the given country name,\r\n * and displays them on the page. The list of countries is paginated across different pages,\r\n * and a loading spinner is shown while the data is being fetched. In case of an error, an\r\n * error message is displayed to the user.\r\n * @async\r\n * @function\r\n * @param {string} country - The country name to search for.\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves a list of countries from the API that match the given country name,\r\n * and displays them on the page. The list of countries is paginated across different pages,\r\n * and a loading spinner is shown while the data is being fetched. In case of an error, an\r\n * error message is displayed to the user.\r\n */\r\nexport const searchResultCountryAutocomplete = async function (country) {\r\n  try {\r\n    // If no country name is provided, exit the function\r\n    if (!country) return;\r\n    // Display a loading spinner while fetching data\r\n    view.renderSpinner();\r\n    // Load the search result for the given country from the API\r\n    await model.loadSearchResultByCountry(country);\r\n\r\n    // Delay the rendering to simulate loading time, then render the countries and pagination\r\n    setTimeout(function () {\r\n      // Retrieve a slice of countries for the current page\r\n      const data = model.getCountriesByPage();\r\n\r\n      // Render the list of countries on the page\r\n      countriesView.render(data);\r\n\r\n      // Render the pagination controls\r\n      paginationView.render(model.state.countyList);\r\n    }, config.SHOW_COUNTRIES_SEC * 1000);\r\n  } catch (err) {\r\n    // Alert the user of any errors\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Loads and renders a list of countries from the API that are located in the\r\n * given region. A loading spinner is shown while the data is being fetched.\r\n * In case of an error, an error message is displayed to the user.\r\n * @async\r\n * @function\r\n * @returns {Promise<void>}\r\n * @description\r\n * This function retrieves a list of countries from the API that are located in\r\n * the given region, and displays them on the page. The list of countries is\r\n * paginated across different pages, and a loading spinner is shown while the\r\n * data is being fetched. In case of an error, an error message is displayed to\r\n * the user.\r\n *\r\n * @example\r\n * controlLoadCountryByRegion();\r\n */\r\nconst controlLoadCountryByRegion = async function () {\r\n  try {\r\n    // Get the region query from the search input\r\n    const region = searchCountryView.getRegionQuery();\r\n\r\n    // If no region is provided, exit the function\r\n    if (!region) return;\r\n\r\n    // Display a loading spinner while fetching data\r\n    view.renderSpinner();\r\n\r\n    // Load the countries by region from the API\r\n    await model.loadCountryByRegion(region);\r\n\r\n    // Delay the rendering to simulate loading time, then render the countries and pagination\r\n    setTimeout(function () {\r\n      // Retrieve a slice of countries for the current page\r\n      const data = model.getCountriesByPage();\r\n\r\n      // Render the list of countries on the page\r\n      countriesView.render(data);\r\n\r\n      // Clear the search input\r\n      searchCountryView.clearInput();\r\n\r\n      // Render the pagination controls\r\n      paginationView.render(model.state.countyList);\r\n    }, config.SHOW_COUNTRIES_SEC * 1000);\r\n  } catch (err) {\r\n    // Alert the user of any errors\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Handles the mode switcher button click event and updates the application state\r\n * and the UI to reflect the new mode. If an error occurs during the execution\r\n * of the function, an error message is displayed to the user.\r\n * @function\r\n * @description\r\n * This function retrieves the current mode from the application state, and\r\n * updates the state with the new mode when the user clicks the mode switcher\r\n * button. The function also renders the new mode on the page, and in case of\r\n * an error, displays an error message to the user.\r\n *\r\n * @example\r\n * controlModeSwitcher();\r\n */\r\nconst controlModeSwitcher = function () {\r\n  try {\r\n    // Get the current mode from the state\r\n    const currentMode = modeSwitcherView.getCountyQuery(\r\n      model.state.currentMode\r\n    );\r\n\r\n    // If the current mode is not available, exit the function\r\n    if (!currentMode) return;\r\n\r\n    // Update the state with the new mode\r\n    model.getCurrentMode(currentMode);\r\n\r\n    // Render the new mode on the page\r\n    const data = model.state.currentMode;\r\n    modeSwitcherView.render(data);\r\n  } catch (err) {\r\n    // Display an error message to the user if an error occurs\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Handles the page load event by loading the current mode from the state and\r\n * rendering it on the page. If an error occurs during the execution of the\r\n * function, an error message is displayed to the user.\r\n * @function\r\n * @description\r\n * This function retrieves the current mode from the application state, and\r\n * renders it on the page. In case of an error, an error message is displayed\r\n * to the user.\r\n *\r\n * @example\r\n * controlModeSwitcherPageLoad();\r\n */\r\nconst controlModeSwitcherPageLoad = function () {\r\n  try {\r\n    // Load the current mode from localStorage or set to default \"Light Mode\"\r\n    model.loadCurrentMode(\"Light Mode\");\r\n\r\n    // Retrieve the current mode from the application's state\r\n    const data = model.state.currentMode;\r\n\r\n    // Render the current mode on the page using modeSwitcherView\r\n    modeSwitcherView.render(data);\r\n  } catch (err) {\r\n    // Display an error message if an error occurs\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Handles the pagination controls click event and updates the application\r\n * state and the UI to reflect the new page. If an error occurs during the\r\n * execution of the function, an error message is displayed to the user.\r\n * @function\r\n * @description\r\n * This function retrieves a slice of countries for the given page number\r\n * from the application state, and renders them on the page. The function\r\n * also renders the pagination controls on the page. In case of an error,\r\n * an error message is displayed to the user.\r\n *\r\n * @param {number} goToPage - The page number to go to.\r\n * @example\r\n * controlPagination(1);\r\n */\r\nconst controlPagination = function (goToPage) {\r\n  try {\r\n    // Retrieve a slice of countries for the specified page\r\n    const data = model.getCountriesByPage(goToPage);\r\n\r\n    // Render the list of countries on the page\r\n    countriesView.render(data);\r\n\r\n    // Render the pagination controls on the page\r\n    paginationView.render(model.state.countyList);\r\n  } catch (err) {\r\n    // Display an error message to the user if an error occurs\r\n    view.renderError(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes event handlers for various UI components in the application.\r\n * This function sets up event handlers for UI components such as the mode\r\n * switcher, region list, country list, search input, and pagination controls.\r\n * It also triggers the autocomplete functionality for country names. This\r\n * setup ensures that the application responds to user interactions and\r\n * updates the UI accordingly.\r\n *\r\n * @function\r\n * @description\r\n * Sets up event handlers for the following UI components:\r\n *  - Mode switcher\r\n *  - Region list\r\n *  - Country list\r\n *  - Search input\r\n *  - Pagination controls\r\n * Also triggers the autocomplete functionality for country names.\r\n */\r\nconst init = function () {\r\n  // Add event handler for mode switcher\r\n  modeSwitcherView.addHandlerLoad(controlModeSwitcherPageLoad);\r\n  modeSwitcherView.addHandlerClick(controlModeSwitcher);\r\n\r\n  // Add event handler for country list\r\n  countriesView.addHandlerRender(controlAllCountryInformation);\r\n\r\n  // Add event handlers for search input\r\n  searchCountryView.addHandlerSearchCountry(controlLoadSearchResultByCountry);\r\n  searchCountryView.addHandlerSearchCountryByRegion(controlLoadCountryByRegion);\r\n\r\n  // Add event handler for pagination controls\r\n  paginationView.addHandlerClick(controlPagination);\r\n};\r\n\r\ninit();\r\n","import View from \"./view.js\";\r\n\r\nexport class CountriesView {\r\n  _parentElement = document.querySelector(\".countries\");\r\n  _numberOfCountries = document.querySelector(\".header__numberOf-countries\");\r\n  _data;\r\n  render(data) {\r\n    this._data = data;\r\n    let markup = \"\";\r\n    markup = this._generateMarkup();\r\n    this._clearMarkup();\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  }\r\n\r\n  _clearMarkup() {\r\n    this._parentElement.innerHTML = \"\";\r\n  }\r\n\r\n  renderSpinner = function () {\r\n    let markup = `<div class=\"loader-container\">\r\n  <div class=\"loader\"></div>\r\n  <div class=\"loader-text\">Loading...</div>\r\n</div>`;\r\n    this._parentElement.innerHTML = \"\";\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  };\r\n\r\n  addHandlerRender(render) {\r\n    [\"load\"].forEach((ev) => window.addEventListener(ev, render));\r\n  }\r\n\r\n  _generateMarkup() {\r\n    let html = \"\";\r\n    if (this._data.length === 0) return;\r\n    else {\r\n      this._numberOfCountries.innerHTML = `${this._data.length} Countries Found`;\r\n      this._data.forEach((data, index) => {\r\n        html += `\r\n        <a class=\"countries__link\" href=\"countryDetails.html?name=${\r\n          data.name.common\r\n        }\">\r\n        <article class=\"country\">\r\n    <img class=\"country__img\" src=\"${data.flags.png}\" />\r\n    <div class=\"country__number\"><span>${index + 1}</span></div>\r\n    <div class=\"country__data\">\r\n      <div class=\"country__heading-box\">\r\n      <h2 class=\"heading-secondary country__heading\">${data.name.common}</h2>\r\n      </div>\r\n      <div class=\"country__info-box\">\r\n      <p class=\"country__row\"><span>Population: </span>${data.population.toLocaleString()}</p>\r\n      <p class=\"country__row\"><span>Region: </span>${data.region}</p>\r\n      <p class=\"country__row\"><span>Capital: </span>${data.capital}</p>\r\n      </div>\r\n    </div>\r\n  </article>\r\n  </a>`;\r\n      });\r\n    }\r\n    return html;\r\n  }\r\n}\r\n\r\nexport default new CountriesView();\r\n","export class View {\r\n  _parentElementSpinner = document.querySelector(\".countries\");\r\n  _errorMessage = \"We could not find a country with that name.\";\r\n\r\n  renderSpinner = function () {\r\n    let markup = `<div class=\"loader-container\">\r\n    <div class=\"loader\"></div>\r\n    <div class=\"loader-text\">Loading...</div>\r\n    </div>`;\r\n    this._parentElementSpinner.innerHTML = \"\";\r\n    this._parentElementSpinner.insertAdjacentHTML(\"beforeend\", markup);\r\n  };\r\n\r\n  /**\r\n   * Renders an error message with a close button to the DOM\r\n   * @param {string} [message=this._errorMessage] - The error message to be displayed\r\n   * @description\r\n   * Renders an error message to the DOM with a close button.\r\n   * If the message parameter is not provided, it defaults to _errorMessage.\r\n   */\r\n  renderError(message = this._errorMessage) {\r\n    const errorMarkup = `\r\n    <div class=\"message msg-danger\">\r\n      <div class=\"message-icon\">\r\n        <i class=\"ion-close-round\">\r\n          <img src=\"/src/images/error_icon.svg\" alt=\"error\" />\r\n        </i>\r\n      </div>\r\n      <div class=\"message-content\">\r\n        <p>${message}</p>\r\n      </div>\r\n      <a href=\"_\" class=\"message-close\">\r\n        <img class=\"close-icon\" src=\"/src/images/cross-icon.svg\" alt=\"close\" />\r\n      </a>\r\n    </div>\r\n  `;\r\n    this._parentElementSpinner.innerHTML = \"\";\r\n    this._parentElementSpinner.insertAdjacentHTML(\"beforeend\", errorMarkup);\r\n  }\r\n}\r\n\r\nexport default new View();\r\n","export class RegionsView {\r\n  _parentElement = document.querySelector(\".region-list\");\r\n  _parentElementSpinner = document.querySelector(\".countries\");\r\n  _data;\r\n  /*************  ✨ Codeium Command ⭐  *************/\r\n  /**\r\n * Renders the list of regions by generating markup and inserting it\r\n * into the parent element.\r\n * @param {Array} data - An array of regions to be displayed.\r\n * @description\r\n * This function updates the internal data state, generates the necessary HTML\r\n * markup for the regions, clears any existing markup, and appends the newly\r\n  /******  1cd4bfc5-2312-4013-bc64-e1c0bc80469c  *******/\r\n  render(data) {\r\n    this._data = data;\r\n    let markup = \"\";\r\n    markup = this._generateMarkup();\r\n    this._clearMarkup();\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  }\r\n\r\n  _clearMarkup() {\r\n    this._parentElement.innerHTML =\r\n      \"<option selected disabled>Filter by Region</option>\";\r\n  }\r\n\r\n  renderSpinner = function () {\r\n    let markup = `<div class=\"loader-container\">\r\n  <div class=\"loader\"></div>\r\n  <div class=\"loader-text\">Loading...</div>\r\n</div>`;\r\n    this._parentElementSpinner.innerHTML = \"\";\r\n    this._parentElementSpinner.insertAdjacentHTML(\"beforeend\", markup);\r\n  };\r\n\r\n  addHandlerRender(render) {\r\n    [\"load\"].forEach((ev) => window.addEventListener(ev, render));\r\n  }\r\n\r\n  _generateMarkup() {\r\n    let html = \"\";\r\n    if (this._data.length === 0) return;\r\n    this._data.forEach((region) => {\r\n      html += `\r\n      <option class=\"region-list\" value=\"${region}\">${region}</option>    \r\n      `;\r\n    });\r\n    return html;\r\n  }\r\n}\r\n\r\nexport default new RegionsView();\r\n","class SearCountryView {\r\n  _parentElementSearch = document.querySelector(\".cta__country-form\");\r\n\r\n  getCountyQuery(countryName) {\r\n    console.log(countryName);\r\n    if (!countryName) {\r\n      return this._parentElementSearch.querySelector(\".input__country-name\")\r\n        .value;\r\n    } else {\r\n      return countryName;\r\n    }\r\n  }\r\n\r\n  clearInput() {\r\n    this._parentElementSearch.querySelector(\".input__country-name\").value = \"\";\r\n  }\r\n\r\n  getRegionQuery() {\r\n    return this._parentElementSearch.querySelector(\".region-list\").value;\r\n  }\r\n\r\n  addHandlerSearchCountry(handler) {\r\n    this._parentElementSearch.addEventListener(\"submit\", function (e) {\r\n      e.preventDefault();\r\n      handler();\r\n    });\r\n  }\r\n\r\n  addHandlerSearchCountryByRegion(handler) {\r\n    this._parentElementSearch\r\n      .querySelector(\".region-list\")\r\n      .addEventListener(\"change\", function (e) {\r\n        e.preventDefault();\r\n        handler();\r\n      });\r\n  }\r\n}\r\n\r\nexport default new SearCountryView();\r\n","class PaginationView {\r\n  _parentElement = document.querySelector(\".pagination\");\r\n  _numberOfCountries = document.querySelector(\".header__numberOf-countries\");\r\n  _data;\r\n  render(data) {\r\n    this._data = data;\r\n    let markup = \"\";\r\n    markup = this._generateMarkup();\r\n    this._clearMarkup();\r\n    this._parentElement.insertAdjacentHTML(\"beforeend\", markup);\r\n  }\r\n\r\n  addHandlerClick(handler) {\r\n    this._parentElement.addEventListener(\"click\", function (e) {\r\n      e.preventDefault();\r\n      const btn = e.target.closest(\".pagination__btn-view-all\");\r\n      if (!btn) return;\r\n      const goToPage = +btn.dataset.goto;\r\n      handler(goToPage);\r\n    });\r\n  }\r\n\r\n  _generateMarkup() {\r\n    if (this._data.results.length === 0) return;\r\n\r\n    const numOfPages = Math.ceil(\r\n      this._data.results.length / this._data.resultsPerPage\r\n    );\r\n\r\n    this._numberOfCountries.innerHTML = \"\";\r\n\r\n    this._numberOfCountries.innerHTML = `Showing <span>${\r\n      this._data.page != numOfPages\r\n        ? this._data.resultsPerPage * this._data.page\r\n        : this._data.results.length\r\n    } </span> out of <span>${this._data.results.length}</span> Countries`;\r\n\r\n    if (this._data.page === 1 && numOfPages > 1)\r\n      return `<button data-goto=\"${numOfPages}\" class=\"pagination__btn pagination__btn-view-all\">Show All ${this._data.results.length} Countries →</button>`;\r\n    return \"\";\r\n  }\r\n  _clearMarkup() {\r\n    this._parentElement.innerHTML = \"\";\r\n  }\r\n}\r\n\r\nexport default new PaginationView();\r\n","import * as loadCountry from \"../controller.js\";\r\n\r\nexport class AutocompleteView {\r\n  _parentElement = document.querySelector(\"#countryName\");\r\n  _parentElementSearch = document.querySelector(\".cta__country-form\");\r\n  _autocompleteItem = document.querySelector(\".autocompleteItem\");\r\n  _data;\r\n  countryName;\r\n\r\n  render(data) {\r\n    this._data = data;\r\n    this.autocomplete(this._parentElement, this._data);\r\n  }\r\n\r\n  autocomplete = function (inputElement, dataArray) {\r\n    let currentFocus = -1;\r\n    inputElement.addEventListener(\"input\", function (e) {\r\n      let i,\r\n        val = this.value;\r\n      closeAllLists();\r\n      if (!val) {\r\n        return false;\r\n      }\r\n      currentFocus = -1;\r\n      let autocompleteContainer = document.createElement(\"div\");\r\n      autocompleteContainer.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n      autocompleteContainer.setAttribute(\"class\", \"autocomplete-items\");\r\n      this.parentNode.appendChild(autocompleteContainer);\r\n      for (i = 0; i < dataArray.length; i++) {\r\n        if (\r\n          dataArray[i].substr(0, val.length).toUpperCase() === val.toUpperCase()\r\n        ) {\r\n          let autocompleteItem = document.createElement(\"div\");\r\n          autocompleteItem.innerHTML =\r\n            \"<strong>\" + dataArray[i].substr(0, val.length) + \"</strong>\";\r\n          autocompleteItem.innerHTML += dataArray[i].substr(val.length);\r\n          let hiddenInput = document.createElement(\"input\");\r\n          hiddenInput.type = \"hidden\";\r\n          hiddenInput.value = dataArray[i];\r\n          autocompleteItem.appendChild(hiddenInput);\r\n          autocompleteContainer.appendChild(autocompleteItem);\r\n          autocompleteItem.addEventListener(\"click\", function (e) {\r\n            e.preventDefault();\r\n            inputElement.value = this.getElementsByTagName(\"input\")[0].value;\r\n            this.countryName = this.getElementsByTagName(\"input\")[0].value;\r\n            loadCountry.searchResultCountryAutocomplete(this.countryName);\r\n            closeAllLists();\r\n          });\r\n        }\r\n      }\r\n    });\r\n    inputElement.addEventListener(\"keydown\", function (e) {\r\n      let listItems = document\r\n        .getElementById(this.id + \"autocomplete-list\")\r\n        .getElementsByTagName(\"div\");\r\n      if (e.keyCode === 40) {\r\n        currentFocus++;\r\n        addActive(listItems);\r\n      } else if (e.keyCode === 38) {\r\n        currentFocus--;\r\n        addActive(listItems);\r\n      } else if (e.keyCode === 13) {\r\n        e.preventDefault();\r\n        if (currentFocus > -1) {\r\n          if (listItems) listItems[currentFocus].click();\r\n        }\r\n      }\r\n    });\r\n    function addActive(listItems) {\r\n      removeActive(listItems);\r\n      if (currentFocus >= listItems.length) currentFocus = 0;\r\n      if (currentFocus < 0) currentFocus = listItems.length - 1;\r\n      listItems[currentFocus].classList.add(\"autocomplete-active\");\r\n    }\r\n    function removeActive(listItems) {\r\n      for (let i = 0; i < listItems.length; i++) {\r\n        listItems[i].classList.remove(\"autocomplete-active\");\r\n      }\r\n    }\r\n    function closeAllLists(element) {\r\n      let listItems = document.getElementsByClassName(\"autocomplete-items\");\r\n      for (let i = 0; i < listItems.length; i++) {\r\n        if (element !== listItems[i] && element !== inputElement) {\r\n          listItems[i].parentNode.removeChild(listItems[i]);\r\n        }\r\n      }\r\n    }\r\n    document.addEventListener(\"click\", function (e) {\r\n      closeAllLists(e.target);\r\n    });\r\n  };\r\n}\r\n\r\nexport default new AutocompleteView();\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0f1d4402dffacf5b$export$ca000e230c0caa3e","$0f1d4402dffacf5b$export$b159f842577c039","$0f1d4402dffacf5b$export$c8dee6738b0bfb71","$0f1d4402dffacf5b$export$295b74b5bfa1a9f4","$0f1d4402dffacf5b$export$10961764e27601cc","$0f1d4402dffacf5b$export$2323b995609520dd","$0f1d4402dffacf5b$export$3e5c7dc73e3fd9a","$0f1d4402dffacf5b$export$b15082540cc0fc25","$fZ5A9","$i9R9q","currentMode","regions","countriesName","countyList","query","results","resultsPerPage","COUNTRY_PER_PAGE","page","countryDetails","name","nativeName","population","populationOnWord","region","subregion","capital","topLevelDomain","currencies","languages","borders","flag","localStorage","setItem","currentStMode","getItem","currentModeByStorage","countriesData","getJSON","API_URL","sort","countryA","countryB","common","localeCompare","map","country","Set","countryNames","error","countryName","trim","data","regionName","trimmedRegionName","countryData","flags","png","allCountriesData","filter","includes","cca3","end","slice","$ba30e20475feac5a$export$923ea8233b386e99","$ba30e20475feac5a$export$196440f71ed9f601","$ba30e20475feac5a$export$68641eeff6858e0f","$ba30e20475feac5a$export$470c370c53745de3","$d3824bf2ef2465db$export$d047a7c56db64af4","url","seconds","console","log","response","Promise","race","fetch","TIMEOUT_SEC","_","reject","setTimeout","ok","statusText","status","json","$1a8cc1083fd329eb$export$2e2bcd8739ae039","$1a8cc1083fd329eb$export$f5b15f0672111987","_modeSwitcher","document","querySelector","_switcherText","_modeSwitcherIcon","_data","render","_renderModeSwitcher","getCountyQuery","textContent","addHandlerLoad","window","addEventListener","addHandlerClick","root","style","setProperty","src","$1is5Y","$b2d7157267813d3a$export$27a5bd065ad55220","_parentElementSpinner","_errorMessage","renderSpinner","markup","innerHTML","insertAdjacentHTML","renderError","message","errorMarkup","$b2d7157267813d3a$export$2e2bcd8739ae039","$b4512d59b693f66b$export$92201c97cb8ac3a5","_parentElement","_numberOfCountries","_generateMarkup","_clearMarkup","addHandlerRender","forEach","ev","html","length","index","toLocaleString","$b4512d59b693f66b$export$2e2bcd8739ae039","$96d45e9ec3ea75d7$export$6ff45ac75707e33b","$96d45e9ec3ea75d7$export$2e2bcd8739ae039","$0e54f03aa4172aac$var$SearCountryView","_parentElementSearch","value","clearInput","getRegionQuery","addHandlerSearchCountry","handler","preventDefault","addHandlerSearchCountryByRegion","$0e54f03aa4172aac$export$2e2bcd8739ae039","$2hk5J","$cfa940594ee109f7$var$PaginationView","btn","target","closest","dataset","goto","numOfPages","Math","ceil","$cfa940594ee109f7$export$2e2bcd8739ae039","$e991ed56cd29ee30$export$d2b6db6a7279fa83","_autocompleteItem","autocomplete","inputElement","dataArray","currentFocus","addActive","listItems","removeActive","i","classList","remove","add","closeAllLists","element","getElementsByClassName","parentNode","removeChild","val","autocompleteContainer","createElement","setAttribute","appendChild","substr","toUpperCase","autocompleteItem","hiddenInput","type","getElementsByTagName","$f50bd1f2915ed0f2$export$71cf45bfef3d8dd2","getElementById","keyCode","click","$e991ed56cd29ee30$export$2e2bcd8739ae039","$f50bd1f2915ed0f2$var$controlAllCountryInformation","getAllCountries","regionsData","state","countriesNameData","getCountriesByPage","$f50bd1f2915ed0f2$var$controlLoadSearchResultByCountry","loadSearchResultByCountry","SHOW_COUNTRIES_SEC","$f50bd1f2915ed0f2$var$controlLoadCountryByRegion","loadCountryByRegion","default","loadCurrentMode","getCurrentMode","goToPage"],"version":3,"file":"index.97dbaeef.js.map"}